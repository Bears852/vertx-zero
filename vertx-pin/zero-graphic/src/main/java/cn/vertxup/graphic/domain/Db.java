/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.graphic.domain;


import cn.vertxup.graphic.domain.tables.GCluster;
import cn.vertxup.graphic.domain.tables.GEdge;
import cn.vertxup.graphic.domain.tables.GGraphic;
import cn.vertxup.graphic.domain.tables.GNode;
import io.vertx.tp.ke.refine.Ke;
import org.jooq.Catalog;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;

import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.10.8"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Db extends SchemaImpl {

    /**
     * The reference instance of <code>DB_ETERNAL</code>
     */
    public static final Db DB_ETERNAL = new Db();
    private static final long serialVersionUID = -1072093268;
    /**
     * The table <code>DB_ETERNAL.G_CLUSTER</code>.
     */
    public final GCluster G_CLUSTER = cn.vertxup.graphic.domain.tables.GCluster.G_CLUSTER;

    /**
     * The table <code>DB_ETERNAL.G_EDGE</code>.
     */
    public final GEdge G_EDGE = cn.vertxup.graphic.domain.tables.GEdge.G_EDGE;

    /**
     * The table <code>DB_ETERNAL.G_GRAPHIC</code>.
     */
    public final GGraphic G_GRAPHIC = cn.vertxup.graphic.domain.tables.GGraphic.G_GRAPHIC;

    /**
     * The table <code>DB_ETERNAL.G_NODE</code>.
     */
    public final GNode G_NODE = cn.vertxup.graphic.domain.tables.GNode.G_NODE;

    /**
     * No further instances allowed
     */
    private Db() {
        super(Ke.getDatabase(), null);
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Table<?>> getTables() {
        List result = new ArrayList();
        result.addAll(getTables0());
        return result;
    }

    private final List<Table<?>> getTables0() {
        return Arrays.<Table<?>>asList(
                GCluster.G_CLUSTER,
                GEdge.G_EDGE,
                GGraphic.G_GRAPHIC,
                GNode.G_NODE);
    }
}
