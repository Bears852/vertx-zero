/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.rbac.domain.tables.daos;


import cn.vertxup.rbac.domain.tables.SRole;
import cn.vertxup.rbac.domain.tables.records.SRoleRecord;

import io.github.jklingsporn.vertx.jooq.future.VertxDAO;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


import java.util.concurrent.CompletableFuture;
import io.github.jklingsporn.vertx.jooq.future.util.FutureTool;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SRoleDao extends DAOImpl<SRoleRecord, cn.vertxup.rbac.domain.tables.pojos.SRole, String> implements VertxDAO<cn.vertxup.rbac.domain.tables.records.SRoleRecord,cn.vertxup.rbac.domain.tables.pojos.SRole,java.lang.String> {

    /**
     * Create a new SRoleDao without any configuration
     */
    public SRoleDao() {
        super(SRole.S_ROLE, cn.vertxup.rbac.domain.tables.pojos.SRole.class);
    }

    /**
     * Create a new SRoleDao with an attached configuration
     */
    public SRoleDao(Configuration configuration) {
        super(SRole.S_ROLE, cn.vertxup.rbac.domain.tables.pojos.SRole.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected String getId(cn.vertxup.rbac.domain.tables.pojos.SRole object) {
        return object.getKey();
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SRole> fetchByKey(String... values) {
        return fetch(SRole.S_ROLE.KEY, values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code>
     */
    public cn.vertxup.rbac.domain.tables.pojos.SRole fetchOneByKey(String value) {
        return fetchOne(SRole.S_ROLE.KEY, value);
    }

    /**
     * Fetch records that have <code>NAME IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SRole> fetchByName(String... values) {
        return fetch(SRole.S_ROLE.NAME, values);
    }

    /**
     * Fetch records that have <code>CODE IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SRole> fetchByCode(String... values) {
        return fetch(SRole.S_ROLE.CODE, values);
    }

    /**
     * Fetch records that have <code>POWER IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SRole> fetchByPower(Boolean... values) {
        return fetch(SRole.S_ROLE.POWER, values);
    }

    /**
     * Fetch records that have <code>COMMENT IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SRole> fetchByComment(String... values) {
        return fetch(SRole.S_ROLE.COMMENT, values);
    }

    /**
     * Fetch records that have <code>MODEL_ID IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SRole> fetchByModelId(String... values) {
        return fetch(SRole.S_ROLE.MODEL_ID, values);
    }

    /**
     * Fetch records that have <code>MODEL_KEY IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SRole> fetchByModelKey(String... values) {
        return fetch(SRole.S_ROLE.MODEL_KEY, values);
    }

    /**
     * Fetch records that have <code>CATEGORY IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SRole> fetchByCategory(String... values) {
        return fetch(SRole.S_ROLE.CATEGORY, values);
    }

    /**
     * Fetch records that have <code>SIGMA IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SRole> fetchBySigma(String... values) {
        return fetch(SRole.S_ROLE.SIGMA, values);
    }

    /**
     * Fetch records that have <code>LANGUAGE IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SRole> fetchByLanguage(String... values) {
        return fetch(SRole.S_ROLE.LANGUAGE, values);
    }

    /**
     * Fetch records that have <code>ACTIVE IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SRole> fetchByActive(Boolean... values) {
        return fetch(SRole.S_ROLE.ACTIVE, values);
    }

    /**
     * Fetch records that have <code>METADATA IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SRole> fetchByMetadata(String... values) {
        return fetch(SRole.S_ROLE.METADATA, values);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SRole> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(SRole.S_ROLE.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SRole> fetchByCreatedBy(String... values) {
        return fetch(SRole.S_ROLE.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SRole> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(SRole.S_ROLE.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SRole> fetchByUpdatedBy(String... values) {
        return fetch(SRole.S_ROLE.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SRole>> fetchByKeyAsync(List<String> values) {
        return fetchAsync(SRole.S_ROLE.KEY,values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code> asynchronously
     */
    public CompletableFuture<cn.vertxup.rbac.domain.tables.pojos.SRole> fetchOneByKeyAsync(String value) {
        return FutureTool.executeBlocking(h->h.complete(fetchOneByKey(value)),vertx());
    }

    /**
     * Fetch records that have <code>NAME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SRole>> fetchByNameAsync(List<String> values) {
        return fetchAsync(SRole.S_ROLE.NAME,values);
    }

    /**
     * Fetch records that have <code>CODE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SRole>> fetchByCodeAsync(List<String> values) {
        return fetchAsync(SRole.S_ROLE.CODE,values);
    }

    /**
     * Fetch records that have <code>POWER IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SRole>> fetchByPowerAsync(List<Boolean> values) {
        return fetchAsync(SRole.S_ROLE.POWER,values);
    }

    /**
     * Fetch records that have <code>COMMENT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SRole>> fetchByCommentAsync(List<String> values) {
        return fetchAsync(SRole.S_ROLE.COMMENT,values);
    }

    /**
     * Fetch records that have <code>MODEL_ID IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SRole>> fetchByModelIdAsync(List<String> values) {
        return fetchAsync(SRole.S_ROLE.MODEL_ID,values);
    }

    /**
     * Fetch records that have <code>MODEL_KEY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SRole>> fetchByModelKeyAsync(List<String> values) {
        return fetchAsync(SRole.S_ROLE.MODEL_KEY,values);
    }

    /**
     * Fetch records that have <code>CATEGORY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SRole>> fetchByCategoryAsync(List<String> values) {
        return fetchAsync(SRole.S_ROLE.CATEGORY,values);
    }

    /**
     * Fetch records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SRole>> fetchBySigmaAsync(List<String> values) {
        return fetchAsync(SRole.S_ROLE.SIGMA,values);
    }

    /**
     * Fetch records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SRole>> fetchByLanguageAsync(List<String> values) {
        return fetchAsync(SRole.S_ROLE.LANGUAGE,values);
    }

    /**
     * Fetch records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SRole>> fetchByActiveAsync(List<Boolean> values) {
        return fetchAsync(SRole.S_ROLE.ACTIVE,values);
    }

    /**
     * Fetch records that have <code>METADATA IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SRole>> fetchByMetadataAsync(List<String> values) {
        return fetchAsync(SRole.S_ROLE.METADATA,values);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SRole>> fetchByCreatedAtAsync(List<LocalDateTime> values) {
        return fetchAsync(SRole.S_ROLE.CREATED_AT,values);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SRole>> fetchByCreatedByAsync(List<String> values) {
        return fetchAsync(SRole.S_ROLE.CREATED_BY,values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SRole>> fetchByUpdatedAtAsync(List<LocalDateTime> values) {
        return fetchAsync(SRole.S_ROLE.UPDATED_AT,values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SRole>> fetchByUpdatedByAsync(List<String> values) {
        return fetchAsync(SRole.S_ROLE.UPDATED_BY,values);
    }

    private io.vertx.core.Vertx vertx;

    @Override
    public void setVertx(io.vertx.core.Vertx vertx) {
        this.vertx = vertx;
    }

    @Override
    public io.vertx.core.Vertx vertx() {
        return this.vertx;
    }

}
