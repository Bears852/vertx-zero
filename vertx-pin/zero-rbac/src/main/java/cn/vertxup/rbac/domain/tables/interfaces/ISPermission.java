/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.rbac.domain.tables.interfaces;


import java.io.Serializable;
import java.time.LocalDateTime;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface ISPermission extends Serializable {

    /**
     * Setter for <code>DB_ETERNAL.S_PERMISSION.KEY</code>. 「key」- 权限ID
     */
    public ISPermission setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PERMISSION.KEY</code>. 「key」- 权限ID
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.S_PERMISSION.NAME</code>. 「name」- 权限名称
     */
    public ISPermission setName(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PERMISSION.NAME</code>. 「name」- 权限名称
     */
    public String getName();

    /**
     * Setter for <code>DB_ETERNAL.S_PERMISSION.CODE</code>. 「code」- 权限系统码
     */
    public ISPermission setCode(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PERMISSION.CODE</code>. 「code」- 权限系统码
     */
    public String getCode();

    /**
     * Setter for <code>DB_ETERNAL.S_PERMISSION.SIGMA</code>. 「sigma」- 绑定的统一标识
     */
    public ISPermission setSigma(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PERMISSION.SIGMA</code>. 「sigma」- 绑定的统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>DB_ETERNAL.S_PERMISSION.LANGUAGE</code>. 「language」- 使用的语言
     */
    public ISPermission setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PERMISSION.LANGUAGE</code>. 「language」- 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>DB_ETERNAL.S_PERMISSION.ACTIVE</code>. 「active」- 是否启用
     */
    public ISPermission setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.S_PERMISSION.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.S_PERMISSION.COMMENT</code>. 「comment」- 权限说明
     */
    public ISPermission setComment(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PERMISSION.COMMENT</code>. 「comment」- 权限说明
     */
    public String getComment();

    /**
     * Setter for <code>DB_ETERNAL.S_PERMISSION.METADATA</code>. 「metadata」- 附加配置数据
     */
    public ISPermission setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PERMISSION.METADATA</code>. 「metadata」- 附加配置数据
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.S_PERMISSION.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public ISPermission setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.S_PERMISSION.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>DB_ETERNAL.S_PERMISSION.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public ISPermission setCreatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PERMISSION.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>DB_ETERNAL.S_PERMISSION.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public ISPermission setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.S_PERMISSION.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>DB_ETERNAL.S_PERMISSION.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public ISPermission setUpdatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PERMISSION.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public String getUpdatedBy();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface ISPermission
     */
    public void from(cn.vertxup.rbac.domain.tables.interfaces.ISPermission from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface ISPermission
     */
    public <E extends cn.vertxup.rbac.domain.tables.interfaces.ISPermission> E into(E into);

    default ISPermission fromJson(io.vertx.core.json.JsonObject json) {
        setKey(json.getString("KEY"));
        setName(json.getString("NAME"));
        setCode(json.getString("CODE"));
        setSigma(json.getString("SIGMA"));
        setLanguage(json.getString("LANGUAGE"));
        setActive(json.getBoolean("ACTIVE"));
        setComment(json.getString("COMMENT"));
        setMetadata(json.getString("METADATA"));
        // Omitting unrecognized type java.time.LocalDateTime for column CREATED_AT!
        setCreatedBy(json.getString("CREATED_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column UPDATED_AT!
        setUpdatedBy(json.getString("UPDATED_BY"));
        return this;
    }


    default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("KEY",getKey());
        json.put("NAME",getName());
        json.put("CODE",getCode());
        json.put("SIGMA",getSigma());
        json.put("LANGUAGE",getLanguage());
        json.put("ACTIVE",getActive());
        json.put("COMMENT",getComment());
        json.put("METADATA",getMetadata());
        // Omitting unrecognized type java.time.LocalDateTime for column CREATED_AT!
        json.put("CREATED_BY",getCreatedBy());
        // Omitting unrecognized type java.time.LocalDateTime for column UPDATED_AT!
        json.put("UPDATED_BY",getUpdatedBy());
        return json;
    }

}
