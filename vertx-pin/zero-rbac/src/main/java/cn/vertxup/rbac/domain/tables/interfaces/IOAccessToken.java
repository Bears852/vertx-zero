/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.rbac.domain.tables.interfaces;


import java.io.Serializable;
import java.time.LocalDateTime;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IOAccessToken extends Serializable {

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.KEY</code>. 「key」- 令牌主键
     */
    public IOAccessToken setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.KEY</code>. 「key」- 令牌主键
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.TOKEN</code>. 「token」- 用户的Token信息
     */
    public IOAccessToken setToken(byte... value);

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.TOKEN</code>. 「token」- 用户的Token信息
     */
    public byte[] getToken();

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.AUTH</code>. 「auth」- 用户的ID的 byte[] 信息
     */
    public IOAccessToken setAuth(byte... value);

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.AUTH</code>. 「auth」- 用户的ID的 byte[] 信息
     */
    public byte[] getAuth();

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.EXPIRED_TIME</code>. 「expiredTime」- 用户的Token过期时间
     */
    public IOAccessToken setExpiredTime(Long value);

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.EXPIRED_TIME</code>. 「expiredTime」- 用户的Token过期时间
     */
    public Long getExpiredTime();

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.REFRESH_TOKEN</code>. 「refreshToken」- 用户的刷新令牌
     */
    public IOAccessToken setRefreshToken(byte... value);

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.REFRESH_TOKEN</code>. 「refreshToken」- 用户的刷新令牌
     */
    public byte[] getRefreshToken();

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.LANGUAGE</code>. 「language」- 使用的语言
     */
    public IOAccessToken setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.LANGUAGE</code>. 「language」- 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.ACTIVE</code>. 「active」- 是否启用
     */
    public IOAccessToken setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.METADATA</code>. 「metadata」- 附加配置数据
     */
    public IOAccessToken setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.METADATA</code>. 「metadata」- 附加配置数据
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public IOAccessToken setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public IOAccessToken setCreatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public String getCreatedBy();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface IOAccessToken
     */
    public void from(cn.vertxup.rbac.domain.tables.interfaces.IOAccessToken from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface IOAccessToken
     */
    public <E extends cn.vertxup.rbac.domain.tables.interfaces.IOAccessToken> E into(E into);

    default IOAccessToken fromJson(io.vertx.core.json.JsonObject json) {
        setKey(json.getString("KEY"));
        setToken(json.getBinary("TOKEN"));
        setAuth(json.getBinary("AUTH"));
        setExpiredTime(json.getLong("EXPIRED_TIME"));
        setRefreshToken(json.getBinary("REFRESH_TOKEN"));
        setLanguage(json.getString("LANGUAGE"));
        setActive(json.getBoolean("ACTIVE"));
        setMetadata(json.getString("METADATA"));
        // Omitting unrecognized type java.time.LocalDateTime for column CREATED_AT!
        setCreatedBy(json.getString("CREATED_BY"));
        return this;
    }


    default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("KEY",getKey());
        json.put("TOKEN",getToken());
        json.put("AUTH",getAuth());
        json.put("EXPIRED_TIME",getExpiredTime());
        json.put("REFRESH_TOKEN",getRefreshToken());
        json.put("LANGUAGE",getLanguage());
        json.put("ACTIVE",getActive());
        json.put("METADATA",getMetadata());
        // Omitting unrecognized type java.time.LocalDateTime for column CREATED_AT!
        json.put("CREATED_BY",getCreatedBy());
        return json;
    }

}
