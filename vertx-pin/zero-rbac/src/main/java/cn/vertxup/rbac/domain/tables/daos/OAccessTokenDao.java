/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.rbac.domain.tables.daos;


import cn.vertxup.rbac.domain.tables.OAccessToken;
import cn.vertxup.rbac.domain.tables.records.OAccessTokenRecord;

import io.github.jklingsporn.vertx.jooq.future.VertxDAO;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


import java.util.concurrent.CompletableFuture;
import io.github.jklingsporn.vertx.jooq.future.util.FutureTool;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OAccessTokenDao extends DAOImpl<OAccessTokenRecord, cn.vertxup.rbac.domain.tables.pojos.OAccessToken, String> implements VertxDAO<cn.vertxup.rbac.domain.tables.records.OAccessTokenRecord,cn.vertxup.rbac.domain.tables.pojos.OAccessToken,java.lang.String> {

    /**
     * Create a new OAccessTokenDao without any configuration
     */
    public OAccessTokenDao() {
        super(OAccessToken.O_ACCESS_TOKEN, cn.vertxup.rbac.domain.tables.pojos.OAccessToken.class);
    }

    /**
     * Create a new OAccessTokenDao with an attached configuration
     */
    public OAccessTokenDao(Configuration configuration) {
        super(OAccessToken.O_ACCESS_TOKEN, cn.vertxup.rbac.domain.tables.pojos.OAccessToken.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected String getId(cn.vertxup.rbac.domain.tables.pojos.OAccessToken object) {
        return object.getKey();
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.OAccessToken> fetchByKey(String... values) {
        return fetch(OAccessToken.O_ACCESS_TOKEN.KEY, values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code>
     */
    public cn.vertxup.rbac.domain.tables.pojos.OAccessToken fetchOneByKey(String value) {
        return fetchOne(OAccessToken.O_ACCESS_TOKEN.KEY, value);
    }

    /**
     * Fetch records that have <code>TOKEN IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.OAccessToken> fetchByToken(byte[]... values) {
        return fetch(OAccessToken.O_ACCESS_TOKEN.TOKEN, values);
    }

    /**
     * Fetch records that have <code>AUTH IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.OAccessToken> fetchByAuth(byte[]... values) {
        return fetch(OAccessToken.O_ACCESS_TOKEN.AUTH, values);
    }

    /**
     * Fetch records that have <code>EXPIRED_TIME IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.OAccessToken> fetchByExpiredTime(Long... values) {
        return fetch(OAccessToken.O_ACCESS_TOKEN.EXPIRED_TIME, values);
    }

    /**
     * Fetch records that have <code>REFRESH_TOKEN IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.OAccessToken> fetchByRefreshToken(byte[]... values) {
        return fetch(OAccessToken.O_ACCESS_TOKEN.REFRESH_TOKEN, values);
    }

    /**
     * Fetch records that have <code>LANGUAGE IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.OAccessToken> fetchByLanguage(String... values) {
        return fetch(OAccessToken.O_ACCESS_TOKEN.LANGUAGE, values);
    }

    /**
     * Fetch records that have <code>ACTIVE IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.OAccessToken> fetchByActive(Boolean... values) {
        return fetch(OAccessToken.O_ACCESS_TOKEN.ACTIVE, values);
    }

    /**
     * Fetch records that have <code>METADATA IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.OAccessToken> fetchByMetadata(String... values) {
        return fetch(OAccessToken.O_ACCESS_TOKEN.METADATA, values);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.OAccessToken> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(OAccessToken.O_ACCESS_TOKEN.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.OAccessToken> fetchByCreatedBy(String... values) {
        return fetch(OAccessToken.O_ACCESS_TOKEN.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.OAccessToken>> fetchByKeyAsync(List<String> values) {
        return fetchAsync(OAccessToken.O_ACCESS_TOKEN.KEY,values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code> asynchronously
     */
    public CompletableFuture<cn.vertxup.rbac.domain.tables.pojos.OAccessToken> fetchOneByKeyAsync(String value) {
        return FutureTool.executeBlocking(h->h.complete(fetchOneByKey(value)),vertx());
    }

    /**
     * Fetch records that have <code>TOKEN IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.OAccessToken>> fetchByTokenAsync(List<byte[]> values) {
        return fetchAsync(OAccessToken.O_ACCESS_TOKEN.TOKEN,values);
    }

    /**
     * Fetch records that have <code>AUTH IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.OAccessToken>> fetchByAuthAsync(List<byte[]> values) {
        return fetchAsync(OAccessToken.O_ACCESS_TOKEN.AUTH,values);
    }

    /**
     * Fetch records that have <code>EXPIRED_TIME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.OAccessToken>> fetchByExpiredTimeAsync(List<Long> values) {
        return fetchAsync(OAccessToken.O_ACCESS_TOKEN.EXPIRED_TIME,values);
    }

    /**
     * Fetch records that have <code>REFRESH_TOKEN IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.OAccessToken>> fetchByRefreshTokenAsync(List<byte[]> values) {
        return fetchAsync(OAccessToken.O_ACCESS_TOKEN.REFRESH_TOKEN,values);
    }

    /**
     * Fetch records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.OAccessToken>> fetchByLanguageAsync(List<String> values) {
        return fetchAsync(OAccessToken.O_ACCESS_TOKEN.LANGUAGE,values);
    }

    /**
     * Fetch records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.OAccessToken>> fetchByActiveAsync(List<Boolean> values) {
        return fetchAsync(OAccessToken.O_ACCESS_TOKEN.ACTIVE,values);
    }

    /**
     * Fetch records that have <code>METADATA IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.OAccessToken>> fetchByMetadataAsync(List<String> values) {
        return fetchAsync(OAccessToken.O_ACCESS_TOKEN.METADATA,values);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.OAccessToken>> fetchByCreatedAtAsync(List<LocalDateTime> values) {
        return fetchAsync(OAccessToken.O_ACCESS_TOKEN.CREATED_AT,values);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.OAccessToken>> fetchByCreatedByAsync(List<String> values) {
        return fetchAsync(OAccessToken.O_ACCESS_TOKEN.CREATED_BY,values);
    }

    private io.vertx.core.Vertx vertx;

    @Override
    public void setVertx(io.vertx.core.Vertx vertx) {
        this.vertx = vertx;
    }

    @Override
    public io.vertx.core.Vertx vertx() {
        return this.vertx;
    }

}
