/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.rbac.domain.tables;


import cn.vertxup.rbac.domain.Db;
import cn.vertxup.rbac.domain.Indexes;
import cn.vertxup.rbac.domain.Keys;
import cn.vertxup.rbac.domain.tables.records.RUserRoleRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.10.8"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class RUserRole extends TableImpl<RUserRoleRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.R_USER_ROLE</code>
     */
    public static final RUserRole R_USER_ROLE = new RUserRole();
    private static final long serialVersionUID = -508855731;
    /**
     * The column <code>DB_ETERNAL.R_USER_ROLE.USER_ID</code>. 「userId」- 关联用户ID
     */
    public final TableField<RUserRoleRecord, String> USER_ID = createField("USER_ID", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "「userId」- 关联用户ID");
    /**
     * The column <code>DB_ETERNAL.R_USER_ROLE.ROLE_ID</code>. 「roleId」- 关联角色ID
     */
    public final TableField<RUserRoleRecord, String> ROLE_ID = createField("ROLE_ID", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "「roleId」- 关联角色ID");
    /**
     * The column <code>DB_ETERNAL.R_USER_ROLE.PRIORITY</code>. 「priority」- 角色优先级
     */
    public final TableField<RUserRoleRecord, Integer> PRIORITY = createField("PRIORITY", org.jooq.impl.SQLDataType.INTEGER, this, "「priority」- 角色优先级");

    /**
     * Create a <code>DB_ETERNAL.R_USER_ROLE</code> table reference
     */
    public RUserRole() {
        this(DSL.name("R_USER_ROLE"), null);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.R_USER_ROLE</code> table reference
     */
    public RUserRole(String alias) {
        this(DSL.name(alias), R_USER_ROLE);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.R_USER_ROLE</code> table reference
     */
    public RUserRole(Name alias) {
        this(alias, R_USER_ROLE);
    }

    private RUserRole(Name alias, Table<RUserRoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private RUserRole(Name alias, Table<RUserRoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RUserRoleRecord> getRecordType() {
        return RUserRoleRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Db.DB_ETERNAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.R_USER_ROLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RUserRoleRecord> getPrimaryKey() {
        return Keys.KEY_R_USER_ROLE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RUserRoleRecord>> getKeys() {
        return Arrays.<UniqueKey<RUserRoleRecord>>asList(Keys.KEY_R_USER_ROLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RUserRole as(String alias) {
        return new RUserRole(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RUserRole as(Name alias) {
        return new RUserRole(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RUserRole rename(String name) {
        return new RUserRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RUserRole rename(Name name) {
        return new RUserRole(name, null);
    }
}
