/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.rbac.domain.tables.daos;


import cn.vertxup.rbac.domain.tables.OUser;
import cn.vertxup.rbac.domain.tables.records.OUserRecord;

import io.github.jklingsporn.vertx.jooq.future.VertxDAO;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


import java.util.concurrent.CompletableFuture;
import io.github.jklingsporn.vertx.jooq.future.util.FutureTool;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OUserDao extends DAOImpl<OUserRecord, cn.vertxup.rbac.domain.tables.pojos.OUser, String> implements VertxDAO<cn.vertxup.rbac.domain.tables.records.OUserRecord,cn.vertxup.rbac.domain.tables.pojos.OUser,java.lang.String> {

    /**
     * Create a new OUserDao without any configuration
     */
    public OUserDao() {
        super(OUser.O_USER, cn.vertxup.rbac.domain.tables.pojos.OUser.class);
    }

    /**
     * Create a new OUserDao with an attached configuration
     */
    public OUserDao(Configuration configuration) {
        super(OUser.O_USER, cn.vertxup.rbac.domain.tables.pojos.OUser.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected String getId(cn.vertxup.rbac.domain.tables.pojos.OUser object) {
        return object.getKey();
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.OUser> fetchByKey(String... values) {
        return fetch(OUser.O_USER.KEY, values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code>
     */
    public cn.vertxup.rbac.domain.tables.pojos.OUser fetchOneByKey(String value) {
        return fetchOne(OUser.O_USER.KEY, value);
    }

    /**
     * Fetch records that have <code>REDIRECT_URI IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.OUser> fetchByRedirectUri(String... values) {
        return fetch(OUser.O_USER.REDIRECT_URI, values);
    }

    /**
     * Fetch records that have <code>CODE IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.OUser> fetchByCode(String... values) {
        return fetch(OUser.O_USER.CODE, values);
    }

    /**
     * Fetch records that have <code>CLIENT_SECRET IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.OUser> fetchByClientSecret(String... values) {
        return fetch(OUser.O_USER.CLIENT_SECRET, values);
    }

    /**
     * Fetch a unique record that has <code>CLIENT_SECRET = value</code>
     */
    public cn.vertxup.rbac.domain.tables.pojos.OUser fetchOneByClientSecret(String value) {
        return fetchOne(OUser.O_USER.CLIENT_SECRET, value);
    }

    /**
     * Fetch records that have <code>CLIENT_ID IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.OUser> fetchByClientId(String... values) {
        return fetch(OUser.O_USER.CLIENT_ID, values);
    }

    /**
     * Fetch a unique record that has <code>CLIENT_ID = value</code>
     */
    public cn.vertxup.rbac.domain.tables.pojos.OUser fetchOneByClientId(String value) {
        return fetchOne(OUser.O_USER.CLIENT_ID, value);
    }

    /**
     * Fetch records that have <code>GRANT_TYPE IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.OUser> fetchByGrantType(String... values) {
        return fetch(OUser.O_USER.GRANT_TYPE, values);
    }

    /**
     * Fetch records that have <code>SCOPE IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.OUser> fetchByScope(String... values) {
        return fetch(OUser.O_USER.SCOPE, values);
    }

    /**
     * Fetch records that have <code>STATE IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.OUser> fetchByState(String... values) {
        return fetch(OUser.O_USER.STATE, values);
    }

    /**
     * Fetch records that have <code>LANGUAGE IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.OUser> fetchByLanguage(String... values) {
        return fetch(OUser.O_USER.LANGUAGE, values);
    }

    /**
     * Fetch records that have <code>ACTIVE IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.OUser> fetchByActive(Boolean... values) {
        return fetch(OUser.O_USER.ACTIVE, values);
    }

    /**
     * Fetch records that have <code>METADATA IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.OUser> fetchByMetadata(String... values) {
        return fetch(OUser.O_USER.METADATA, values);
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.OUser>> fetchByKeyAsync(List<String> values) {
        return fetchAsync(OUser.O_USER.KEY,values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code> asynchronously
     */
    public CompletableFuture<cn.vertxup.rbac.domain.tables.pojos.OUser> fetchOneByKeyAsync(String value) {
        return FutureTool.executeBlocking(h->h.complete(fetchOneByKey(value)),vertx());
    }

    /**
     * Fetch records that have <code>REDIRECT_URI IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.OUser>> fetchByRedirectUriAsync(List<String> values) {
        return fetchAsync(OUser.O_USER.REDIRECT_URI,values);
    }

    /**
     * Fetch records that have <code>CODE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.OUser>> fetchByCodeAsync(List<String> values) {
        return fetchAsync(OUser.O_USER.CODE,values);
    }

    /**
     * Fetch records that have <code>CLIENT_SECRET IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.OUser>> fetchByClientSecretAsync(List<String> values) {
        return fetchAsync(OUser.O_USER.CLIENT_SECRET,values);
    }

    /**
     * Fetch a unique record that has <code>CLIENT_SECRET = value</code> asynchronously
     */
    public CompletableFuture<cn.vertxup.rbac.domain.tables.pojos.OUser> fetchOneByClientSecretAsync(String value) {
        return FutureTool.executeBlocking(h->h.complete(fetchOneByClientSecret(value)),vertx());
    }

    /**
     * Fetch records that have <code>CLIENT_ID IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.OUser>> fetchByClientIdAsync(List<String> values) {
        return fetchAsync(OUser.O_USER.CLIENT_ID,values);
    }

    /**
     * Fetch a unique record that has <code>CLIENT_ID = value</code> asynchronously
     */
    public CompletableFuture<cn.vertxup.rbac.domain.tables.pojos.OUser> fetchOneByClientIdAsync(String value) {
        return FutureTool.executeBlocking(h->h.complete(fetchOneByClientId(value)),vertx());
    }

    /**
     * Fetch records that have <code>GRANT_TYPE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.OUser>> fetchByGrantTypeAsync(List<String> values) {
        return fetchAsync(OUser.O_USER.GRANT_TYPE,values);
    }

    /**
     * Fetch records that have <code>SCOPE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.OUser>> fetchByScopeAsync(List<String> values) {
        return fetchAsync(OUser.O_USER.SCOPE,values);
    }

    /**
     * Fetch records that have <code>STATE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.OUser>> fetchByStateAsync(List<String> values) {
        return fetchAsync(OUser.O_USER.STATE,values);
    }

    /**
     * Fetch records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.OUser>> fetchByLanguageAsync(List<String> values) {
        return fetchAsync(OUser.O_USER.LANGUAGE,values);
    }

    /**
     * Fetch records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.OUser>> fetchByActiveAsync(List<Boolean> values) {
        return fetchAsync(OUser.O_USER.ACTIVE,values);
    }

    /**
     * Fetch records that have <code>METADATA IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.OUser>> fetchByMetadataAsync(List<String> values) {
        return fetchAsync(OUser.O_USER.METADATA,values);
    }

    private io.vertx.core.Vertx vertx;

    @Override
    public void setVertx(io.vertx.core.Vertx vertx) {
        this.vertx = vertx;
    }

    @Override
    public io.vertx.core.Vertx vertx() {
        return this.vertx;
    }

}
