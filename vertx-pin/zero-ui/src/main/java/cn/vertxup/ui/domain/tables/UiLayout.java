/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ui.domain.tables;


import cn.vertxup.ui.domain.Db;
import cn.vertxup.ui.domain.Indexes;
import cn.vertxup.ui.domain.Keys;
import cn.vertxup.ui.domain.tables.records.UiLayoutRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.10.8"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class UiLayout extends TableImpl<UiLayoutRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.UI_LAYOUT</code>
     */
    public static final UiLayout UI_LAYOUT = new UiLayout();
    private static final long serialVersionUID = -466522281;
    /**
     * The column <code>DB_ETERNAL.UI_LAYOUT.KEY</code>. 「key」- Tpl模板唯一主键
     */
    public final TableField<UiLayoutRecord, String> KEY = createField("KEY", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "「key」- Tpl模板唯一主键");
    /**
     * The column <code>DB_ETERNAL.UI_LAYOUT.NAME</code>. 「name」- Tpl模板名称
     */
    public final TableField<UiLayoutRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「name」- Tpl模板名称");
    /**
     * The column <code>DB_ETERNAL.UI_LAYOUT.CONFIG</code>. 「config」- 主配置
     */
    public final TableField<UiLayoutRecord, String> CONFIG = createField("CONFIG", org.jooq.impl.SQLDataType.CLOB, this, "「config」- 主配置");
    /**
     * The column <code>DB_ETERNAL.UI_LAYOUT.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<UiLayoutRecord, Boolean> ACTIVE = createField("ACTIVE", org.jooq.impl.SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.UI_LAYOUT.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<UiLayoutRecord, String> SIGMA = createField("SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.UI_LAYOUT.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<UiLayoutRecord, String> METADATA = createField("METADATA", org.jooq.impl.SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.UI_LAYOUT.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<UiLayoutRecord, String> LANGUAGE = createField("LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.UI_LAYOUT.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<UiLayoutRecord, LocalDateTime> CREATED_AT = createField("CREATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.UI_LAYOUT.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<UiLayoutRecord, String> CREATED_BY = createField("CREATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.UI_LAYOUT.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<UiLayoutRecord, LocalDateTime> UPDATED_AT = createField("UPDATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.UI_LAYOUT.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<UiLayoutRecord, String> UPDATED_BY = createField("UPDATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    /**
     * Create a <code>DB_ETERNAL.UI_LAYOUT</code> table reference
     */
    public UiLayout() {
        this(DSL.name("UI_LAYOUT"), null);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.UI_LAYOUT</code> table reference
     */
    public UiLayout(String alias) {
        this(DSL.name(alias), UI_LAYOUT);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.UI_LAYOUT</code> table reference
     */
    public UiLayout(Name alias) {
        this(alias, UI_LAYOUT);
    }

    private UiLayout(Name alias, Table<UiLayoutRecord> aliased) {
        this(alias, aliased, null);
    }

    private UiLayout(Name alias, Table<UiLayoutRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UiLayoutRecord> getRecordType() {
        return UiLayoutRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Db.DB_ETERNAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.UI_LAYOUT_NAME, Indexes.UI_LAYOUT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UiLayoutRecord> getPrimaryKey() {
        return Keys.KEY_UI_LAYOUT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UiLayoutRecord>> getKeys() {
        return Arrays.<UniqueKey<UiLayoutRecord>>asList(Keys.KEY_UI_LAYOUT_PRIMARY, Keys.KEY_UI_LAYOUT_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UiLayout as(String alias) {
        return new UiLayout(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UiLayout as(Name alias) {
        return new UiLayout(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UiLayout rename(String name) {
        return new UiLayout(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UiLayout rename(Name name) {
        return new UiLayout(name, null);
    }
}
