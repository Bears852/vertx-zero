/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ui.domain.tables;


import cn.vertxup.ui.domain.Db;
import cn.vertxup.ui.domain.Indexes;
import cn.vertxup.ui.domain.Keys;
import cn.vertxup.ui.domain.tables.records.UiListRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.10.8"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class UiList extends TableImpl<UiListRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.UI_LIST</code>
     */
    public static final UiList UI_LIST = new UiList();
    private static final long serialVersionUID = 1475438340;
    /**
     * The column <code>DB_ETERNAL.UI_LIST.KEY</code>. 「key」- 主键
     */
    public final TableField<UiListRecord, String> KEY = createField("KEY", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 主键");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.NAME</code>. 「name」- 名称
     */
    public final TableField<UiListRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「name」- 名称");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.CODE</code>. 「code」- 系统编码
     */
    public final TableField<UiListRecord, String> CODE = createField("CODE", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「code」- 系统编码");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.V_QUERY</code>. 「vQuery」- 连接query到 grid -&gt; query 节点
     */
    public final TableField<UiListRecord, String> V_QUERY = createField("V_QUERY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「vQuery」- 连接query到 grid -> query 节点");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.V_SEARCH</code>. 「vSearch」- 连接search到 grid -&gt; options 节点
     */
    public final TableField<UiListRecord, String> V_SEARCH = createField("V_SEARCH", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「vSearch」- 连接search到 grid -> options 节点");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.V_TABLE</code>. 「vTable」- 连接table到 grid -&gt; table 节点
     */
    public final TableField<UiListRecord, String> V_TABLE = createField("V_TABLE", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「vTable」- 连接table到 grid -> table 节点");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.V_SEGMENT</code>. 「vSegment」- Json结构，对应到 grid -&gt; component 节点
     */
    public final TableField<UiListRecord, String> V_SEGMENT = createField("V_SEGMENT", org.jooq.impl.SQLDataType.CLOB, this, "「vSegment」- Json结构，对应到 grid -> component 节点");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.DYNAMIC_COLUMN</code>. 「dynamicColumn」- 动态列？
     */
    public final TableField<UiListRecord, Boolean> DYNAMIC_COLUMN = createField("DYNAMIC_COLUMN", org.jooq.impl.SQLDataType.BIT, this, "「dynamicColumn」- 动态列？");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.DYNAMIC_SWITCH</code>. 「dynamicSwitch」- 动态切换？
     */
    public final TableField<UiListRecord, Boolean> DYNAMIC_SWITCH = createField("DYNAMIC_SWITCH", org.jooq.impl.SQLDataType.BIT, this, "「dynamicSwitch」- 动态切换？");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.OPTIONS_AJAX</code>. 「optionsAjax」- 所有 ajax系列的配置
     */
    public final TableField<UiListRecord, String> OPTIONS_AJAX = createField("OPTIONS_AJAX", org.jooq.impl.SQLDataType.CLOB, this, "「optionsAjax」- 所有 ajax系列的配置");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.OPTIONS_SUBMIT</code>. 「optionsSubmit」- 所有提交类的配置
     */
    public final TableField<UiListRecord, String> OPTIONS_SUBMIT = createField("OPTIONS_SUBMIT", org.jooq.impl.SQLDataType.CLOB, this, "「optionsSubmit」- 所有提交类的配置");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.OPTIONS</code>. 「options」- 配置项
     */
    public final TableField<UiListRecord, String> OPTIONS = createField("OPTIONS", org.jooq.impl.SQLDataType.CLOB, this, "「options」- 配置项");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.CLASS_COMBINER</code>. 「classCombiner」- 组装器
     */
    public final TableField<UiListRecord, String> CLASS_COMBINER = createField("CLASS_COMBINER", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「classCombiner」- 组装器");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<UiListRecord, Boolean> ACTIVE = createField("ACTIVE", org.jooq.impl.SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<UiListRecord, String> SIGMA = createField("SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<UiListRecord, String> METADATA = createField("METADATA", org.jooq.impl.SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<UiListRecord, String> LANGUAGE = createField("LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<UiListRecord, LocalDateTime> CREATED_AT = createField("CREATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<UiListRecord, String> CREATED_BY = createField("CREATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<UiListRecord, LocalDateTime> UPDATED_AT = createField("UPDATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<UiListRecord, String> UPDATED_BY = createField("UPDATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    /**
     * Create a <code>DB_ETERNAL.UI_LIST</code> table reference
     */
    public UiList() {
        this(DSL.name("UI_LIST"), null);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.UI_LIST</code> table reference
     */
    public UiList(String alias) {
        this(DSL.name(alias), UI_LIST);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.UI_LIST</code> table reference
     */
    public UiList(Name alias) {
        this(alias, UI_LIST);
    }

    private UiList(Name alias, Table<UiListRecord> aliased) {
        this(alias, aliased, null);
    }

    private UiList(Name alias, Table<UiListRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UiListRecord> getRecordType() {
        return UiListRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Db.DB_ETERNAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.UI_LIST_CODE, Indexes.UI_LIST_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UiListRecord> getPrimaryKey() {
        return Keys.KEY_UI_LIST_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UiListRecord>> getKeys() {
        return Arrays.<UniqueKey<UiListRecord>>asList(Keys.KEY_UI_LIST_PRIMARY, Keys.KEY_UI_LIST_CODE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UiList as(String alias) {
        return new UiList(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UiList as(Name alias) {
        return new UiList(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UiList rename(String name) {
        return new UiList(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UiList rename(Name name) {
        return new UiList(name, null);
    }
}
