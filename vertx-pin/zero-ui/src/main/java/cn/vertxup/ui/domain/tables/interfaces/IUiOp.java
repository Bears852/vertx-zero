/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.ui.domain.tables.interfaces;


import java.io.Serializable;
import java.time.LocalDateTime;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IUiOp extends Serializable {

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.KEY</code>. 「key」- 操作主键
     */
    public IUiOp setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.KEY</code>. 「key」- 操作主键
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.ACTION</code>. 「action」- S_ACTION中的code（权限检查专用）
     */
    public IUiOp setAction(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.ACTION</code>. 「action」- S_ACTION中的code（权限检查专用）
     */
    public String getAction();

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.TEXT</code>. 「text」- 该操作上的文字信息
     */
    public IUiOp setText(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.TEXT</code>. 「text」- 该操作上的文字信息
     */
    public String getText();

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.EVENT</code>. 「event」- 操作中的 event 事件名称
     */
    public IUiOp setEvent(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.EVENT</code>. 「event」- 操作中的 event 事件名称
     */
    public String getEvent();

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.CLIENT_KEY</code>. 「clientKey」- 一般是Html中对应的key信息，如 $opSave
     */
    public IUiOp setClientKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.CLIENT_KEY</code>. 「clientKey」- 一般是Html中对应的key信息，如 $opSave
     */
    public String getClientKey();

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.CLIENT_ID</code>. 「clientId」- 没有特殊情况，clientId = clientKey
     */
    public IUiOp setClientId(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.CLIENT_ID</code>. 「clientId」- 没有特殊情况，clientId = clientKey
     */
    public String getClientId();

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.CONFIG</code>. 「config」- 该按钮操作对应的配置数据信息, icon, type
     */
    public IUiOp setConfig(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.CONFIG</code>. 「config」- 该按钮操作对应的配置数据信息, icon, type
     */
    public String getConfig();

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.PLUGIN</code>. 「plugin」- 该按钮中的插件，如 tooltip，component等
     */
    public IUiOp setPlugin(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.PLUGIN</code>. 「plugin」- 该按钮中的插件，如 tooltip，component等
     */
    public String getPlugin();

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.CONTROL_ID</code>. 「controlId」- 挂载专用的ID
     */
    public IUiOp setControlId(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.CONTROL_ID</code>. 「controlId」- 挂载专用的ID
     */
    public String getControlId();

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.ACTIVE</code>. 「active」- 是否启用
     */
    public IUiOp setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.SIGMA</code>. 「sigma」- 统一标识
     */
    public IUiOp setSigma(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.SIGMA</code>. 「sigma」- 统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.METADATA</code>. 「metadata」- 附加配置
     */
    public IUiOp setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.METADATA</code>. 「metadata」- 附加配置
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.LANGUAGE</code>. 「language」- 使用的语言
     */
    public IUiOp setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.LANGUAGE</code>. 「language」- 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public IUiOp setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public IUiOp setCreatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public IUiOp setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public IUiOp setUpdatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public String getUpdatedBy();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface IUiOp
     */
    public void from(cn.vertxup.ui.domain.tables.interfaces.IUiOp from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface IUiOp
     */
    public <E extends cn.vertxup.ui.domain.tables.interfaces.IUiOp> E into(E into);

    default IUiOp fromJson(io.vertx.core.json.JsonObject json) {
        setKey(json.getString("KEY"));
        setAction(json.getString("ACTION"));
        setText(json.getString("TEXT"));
        setEvent(json.getString("EVENT"));
        setClientKey(json.getString("CLIENT_KEY"));
        setClientId(json.getString("CLIENT_ID"));
        setConfig(json.getString("CONFIG"));
        setPlugin(json.getString("PLUGIN"));
        setControlId(json.getString("CONTROL_ID"));
        setActive(json.getBoolean("ACTIVE"));
        setSigma(json.getString("SIGMA"));
        setMetadata(json.getString("METADATA"));
        setLanguage(json.getString("LANGUAGE"));
        // Omitting unrecognized type java.time.LocalDateTime for column CREATED_AT!
        setCreatedBy(json.getString("CREATED_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column UPDATED_AT!
        setUpdatedBy(json.getString("UPDATED_BY"));
        return this;
    }


    default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("KEY",getKey());
        json.put("ACTION",getAction());
        json.put("TEXT",getText());
        json.put("EVENT",getEvent());
        json.put("CLIENT_KEY",getClientKey());
        json.put("CLIENT_ID",getClientId());
        json.put("CONFIG",getConfig());
        json.put("PLUGIN",getPlugin());
        json.put("CONTROL_ID",getControlId());
        json.put("ACTIVE",getActive());
        json.put("SIGMA",getSigma());
        json.put("METADATA",getMetadata());
        json.put("LANGUAGE",getLanguage());
        // Omitting unrecognized type java.time.LocalDateTime for column CREATED_AT!
        json.put("CREATED_BY",getCreatedBy());
        // Omitting unrecognized type java.time.LocalDateTime for column UPDATED_AT!
        json.put("UPDATED_BY",getUpdatedBy());
        return json;
    }

}
