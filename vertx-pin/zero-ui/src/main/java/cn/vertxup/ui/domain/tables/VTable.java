/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ui.domain.tables;


import cn.vertxup.ui.domain.Db;
import cn.vertxup.ui.domain.Indexes;
import cn.vertxup.ui.domain.Keys;
import cn.vertxup.ui.domain.tables.records.VTableRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.10.8"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class VTable extends TableImpl<VTableRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.V_TABLE</code>
     */
    public static final VTable V_TABLE = new VTable();
    private static final long serialVersionUID = 769174916;
    /**
     * The column <code>DB_ETERNAL.V_TABLE.KEY</code>. 「key」- 表选项主键
     */
    public final TableField<VTableRecord, String> KEY = createField("KEY", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 表选项主键");
    /**
     * The column <code>DB_ETERNAL.V_TABLE.BORDERED</code>. 「bordered」- 是否带表框
     */
    public final TableField<VTableRecord, Boolean> BORDERED = createField("BORDERED", org.jooq.impl.SQLDataType.BIT, this, "「bordered」- 是否带表框");
    /**
     * The column <code>DB_ETERNAL.V_TABLE.SIZE</code>. 「size」- 表格尺寸
     */
    public final TableField<VTableRecord, String> SIZE = createField("SIZE", org.jooq.impl.SQLDataType.VARCHAR(16), this, "「size」- 表格尺寸");
    /**
     * The column <code>DB_ETERNAL.V_TABLE.CLASS_NAME</code>. 「className」- CSS属性
     */
    public final TableField<VTableRecord, String> CLASS_NAME = createField("CLASS_NAME", org.jooq.impl.SQLDataType.VARCHAR(128), this, "「className」- CSS属性");
    /**
     * The column <code>DB_ETERNAL.V_TABLE.TOTAL_REPORT</code>. 「totalReport」- total.report - 文字: 总共多少条统计
     */
    public final TableField<VTableRecord, String> TOTAL_REPORT = createField("TOTAL_REPORT", org.jooq.impl.SQLDataType.VARCHAR(128), this, "「totalReport」- total.report - 文字: 总共多少条统计");
    /**
     * The column <code>DB_ETERNAL.V_TABLE.TOTAL_SELECTED</code>. 「totalSelected」- total.selected - 文字: 选择了多少条
     */
    public final TableField<VTableRecord, String> TOTAL_SELECTED = createField("TOTAL_SELECTED", org.jooq.impl.SQLDataType.VARCHAR(128), this, "「totalSelected」- total.selected - 文字: 选择了多少条");
    /**
     * The column <code>DB_ETERNAL.V_TABLE.ROW_DOUBLE_CLICK</code>. 「rowDoubleClick」- row.onDoubleClick - 双击事件名
     */
    public final TableField<VTableRecord, String> ROW_DOUBLE_CLICK = createField("ROW_DOUBLE_CLICK", org.jooq.impl.SQLDataType.VARCHAR(64), this, "「rowDoubleClick」- row.onDoubleClick - 双击事件名");
    /**
     * The column <code>DB_ETERNAL.V_TABLE.ROW_CLICK</code>. 「rowClick」- row.onClick - 单击事件名
     */
    public final TableField<VTableRecord, String> ROW_CLICK = createField("ROW_CLICK", org.jooq.impl.SQLDataType.VARCHAR(64), this, "「rowClick」- row.onClick - 单击事件名");
    /**
     * The column <code>DB_ETERNAL.V_TABLE.ROW_CONTEXT_MENU</code>. 「rowContextMenu」- row.onContextMenu - 右键菜单事件名
     */
    public final TableField<VTableRecord, String> ROW_CONTEXT_MENU = createField("ROW_CONTEXT_MENU", org.jooq.impl.SQLDataType.VARCHAR(64), this, "「rowContextMenu」- row.onContextMenu - 右键菜单事件名");
    /**
     * The column <code>DB_ETERNAL.V_TABLE.ROW_MOUSE_ENTER</code>. 「rowMouseEnter」- row.onMouseEnter - 鼠标左键事件名
     */
    public final TableField<VTableRecord, String> ROW_MOUSE_ENTER = createField("ROW_MOUSE_ENTER", org.jooq.impl.SQLDataType.VARCHAR(64), this, "「rowMouseEnter」- row.onMouseEnter - 鼠标左键事件名");
    /**
     * The column <code>DB_ETERNAL.V_TABLE.ROW_MOUSE_LEAVE</code>. 「rowMouseLeave」- row.onMouseLeave - 鼠标移开事件名
     */
    public final TableField<VTableRecord, String> ROW_MOUSE_LEAVE = createField("ROW_MOUSE_LEAVE", org.jooq.impl.SQLDataType.VARCHAR(64), this, "「rowMouseLeave」- row.onMouseLeave - 鼠标移开事件名");
    /**
     * The column <code>DB_ETERNAL.V_TABLE.OP_TITLE</code>. 「opTitle」- columns/[0]/title, 执行列标题
     */
    public final TableField<VTableRecord, String> OP_TITLE = createField("OP_TITLE", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「opTitle」- columns/[0]/title, 执行列标题");
    /**
     * The column <code>DB_ETERNAL.V_TABLE.OP_DATA_INDEX</code>. 「opDataIndex」- columns/[0]/dataIndex, 执行列标题
     */
    public final TableField<VTableRecord, String> OP_DATA_INDEX = createField("OP_DATA_INDEX", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「opDataIndex」- columns/[0]/dataIndex, 执行列标题");
    /**
     * The column <code>DB_ETERNAL.V_TABLE.OP_FIXED</code>. 「opFixed」- columns/[0]/fixed，执行列左还是右
     */
    public final TableField<VTableRecord, Boolean> OP_FIXED = createField("OP_FIXED", org.jooq.impl.SQLDataType.BIT.defaultValue(org.jooq.impl.DSL.inline("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "「opFixed」- columns/[0]/fixed，执行列左还是右");
    /**
     * The column <code>DB_ETERNAL.V_TABLE.OP_CONFIG</code>. 「opConfig」- columns/[0]/$option, 执行类对应配置，配置按钮
     */
    public final TableField<VTableRecord, String> OP_CONFIG = createField("OP_CONFIG", org.jooq.impl.SQLDataType.CLOB, this, "「opConfig」- columns/[0]/$option, 执行类对应配置，配置按钮");

    /**
     * Create a <code>DB_ETERNAL.V_TABLE</code> table reference
     */
    public VTable() {
        this(DSL.name("V_TABLE"), null);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.V_TABLE</code> table reference
     */
    public VTable(String alias) {
        this(DSL.name(alias), V_TABLE);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.V_TABLE</code> table reference
     */
    public VTable(Name alias) {
        this(alias, V_TABLE);
    }

    private VTable(Name alias, Table<VTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private VTable(Name alias, Table<VTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VTableRecord> getRecordType() {
        return VTableRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Db.DB_ETERNAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.V_TABLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<VTableRecord> getPrimaryKey() {
        return Keys.KEY_V_TABLE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<VTableRecord>> getKeys() {
        return Arrays.<UniqueKey<VTableRecord>>asList(Keys.KEY_V_TABLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VTable as(String alias) {
        return new VTable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VTable as(Name alias) {
        return new VTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VTable rename(String name) {
        return new VTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VTable rename(Name name) {
        return new VTable(name, null);
    }
}
