/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.ui.domain.tables.daos;


import cn.vertxup.ui.domain.tables.VQuery;
import cn.vertxup.ui.domain.tables.records.VQueryRecord;

import io.github.jklingsporn.vertx.jooq.future.VertxDAO;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


import java.util.concurrent.CompletableFuture;
import io.github.jklingsporn.vertx.jooq.future.util.FutureTool;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VQueryDao extends DAOImpl<VQueryRecord, cn.vertxup.ui.domain.tables.pojos.VQuery, String> implements VertxDAO<cn.vertxup.ui.domain.tables.records.VQueryRecord,cn.vertxup.ui.domain.tables.pojos.VQuery,java.lang.String> {

    /**
     * Create a new VQueryDao without any configuration
     */
    public VQueryDao() {
        super(VQuery.V_QUERY, cn.vertxup.ui.domain.tables.pojos.VQuery.class);
    }

    /**
     * Create a new VQueryDao with an attached configuration
     */
    public VQueryDao(Configuration configuration) {
        super(VQuery.V_QUERY, cn.vertxup.ui.domain.tables.pojos.VQuery.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected String getId(cn.vertxup.ui.domain.tables.pojos.VQuery object) {
        return object.getKey();
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code>
     */
    public List<cn.vertxup.ui.domain.tables.pojos.VQuery> fetchByKey(String... values) {
        return fetch(VQuery.V_QUERY.KEY, values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code>
     */
    public cn.vertxup.ui.domain.tables.pojos.VQuery fetchOneByKey(String value) {
        return fetchOne(VQuery.V_QUERY.KEY, value);
    }

    /**
     * Fetch records that have <code>PROJECTION IN (values)</code>
     */
    public List<cn.vertxup.ui.domain.tables.pojos.VQuery> fetchByProjection(String... values) {
        return fetch(VQuery.V_QUERY.PROJECTION, values);
    }

    /**
     * Fetch records that have <code>PAGER IN (values)</code>
     */
    public List<cn.vertxup.ui.domain.tables.pojos.VQuery> fetchByPager(String... values) {
        return fetch(VQuery.V_QUERY.PAGER, values);
    }

    /**
     * Fetch records that have <code>SORTER IN (values)</code>
     */
    public List<cn.vertxup.ui.domain.tables.pojos.VQuery> fetchBySorter(String... values) {
        return fetch(VQuery.V_QUERY.SORTER, values);
    }

    /**
     * Fetch records that have <code>CRITERIA IN (values)</code>
     */
    public List<cn.vertxup.ui.domain.tables.pojos.VQuery> fetchByCriteria(String... values) {
        return fetch(VQuery.V_QUERY.CRITERIA, values);
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.ui.domain.tables.pojos.VQuery>> fetchByKeyAsync(List<String> values) {
        return fetchAsync(VQuery.V_QUERY.KEY,values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code> asynchronously
     */
    public CompletableFuture<cn.vertxup.ui.domain.tables.pojos.VQuery> fetchOneByKeyAsync(String value) {
        return FutureTool.executeBlocking(h->h.complete(fetchOneByKey(value)),vertx());
    }

    /**
     * Fetch records that have <code>PROJECTION IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.ui.domain.tables.pojos.VQuery>> fetchByProjectionAsync(List<String> values) {
        return fetchAsync(VQuery.V_QUERY.PROJECTION,values);
    }

    /**
     * Fetch records that have <code>PAGER IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.ui.domain.tables.pojos.VQuery>> fetchByPagerAsync(List<String> values) {
        return fetchAsync(VQuery.V_QUERY.PAGER,values);
    }

    /**
     * Fetch records that have <code>SORTER IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.ui.domain.tables.pojos.VQuery>> fetchBySorterAsync(List<String> values) {
        return fetchAsync(VQuery.V_QUERY.SORTER,values);
    }

    /**
     * Fetch records that have <code>CRITERIA IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.ui.domain.tables.pojos.VQuery>> fetchByCriteriaAsync(List<String> values) {
        return fetchAsync(VQuery.V_QUERY.CRITERIA,values);
    }

    private io.vertx.core.Vertx vertx;

    @Override
    public void setVertx(io.vertx.core.Vertx vertx) {
        this.vertx = vertx;
    }

    @Override
    public io.vertx.core.Vertx vertx() {
        return this.vertx;
    }

}
