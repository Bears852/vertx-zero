/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.atom.domain.tables.daos;


import cn.vertxup.atom.domain.tables.MRelation;
import cn.vertxup.atom.domain.tables.records.MRelationRecord;

import io.github.jklingsporn.vertx.jooq.future.VertxDAO;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


import java.util.concurrent.CompletableFuture;
import io.github.jklingsporn.vertx.jooq.future.util.FutureTool;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MRelationDao extends DAOImpl<MRelationRecord, cn.vertxup.atom.domain.tables.pojos.MRelation, String> implements VertxDAO<cn.vertxup.atom.domain.tables.records.MRelationRecord,cn.vertxup.atom.domain.tables.pojos.MRelation,java.lang.String> {

    /**
     * Create a new MRelationDao without any configuration
     */
    public MRelationDao() {
        super(MRelation.M_RELATION, cn.vertxup.atom.domain.tables.pojos.MRelation.class);
    }

    /**
     * Create a new MRelationDao with an attached configuration
     */
    public MRelationDao(Configuration configuration) {
        super(MRelation.M_RELATION, cn.vertxup.atom.domain.tables.pojos.MRelation.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected String getId(cn.vertxup.atom.domain.tables.pojos.MRelation object) {
        return object.getKey();
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MRelation> fetchByKey(String... values) {
        return fetch(MRelation.M_RELATION.KEY, values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code>
     */
    public cn.vertxup.atom.domain.tables.pojos.MRelation fetchOneByKey(String value) {
        return fetchOne(MRelation.M_RELATION.KEY, value);
    }

    /**
     * Fetch records that have <code>TYPE IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MRelation> fetchByType(String... values) {
        return fetch(MRelation.M_RELATION.TYPE, values);
    }

    /**
     * Fetch records that have <code>UPSTREAM IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MRelation> fetchByUpstream(String... values) {
        return fetch(MRelation.M_RELATION.UPSTREAM, values);
    }

    /**
     * Fetch records that have <code>DOWNSTREAM IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MRelation> fetchByDownstream(String... values) {
        return fetch(MRelation.M_RELATION.DOWNSTREAM, values);
    }

    /**
     * Fetch records that have <code>COMMENTS IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MRelation> fetchByComments(String... values) {
        return fetch(MRelation.M_RELATION.COMMENTS, values);
    }

    /**
     * Fetch records that have <code>SIGMA IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MRelation> fetchBySigma(String... values) {
        return fetch(MRelation.M_RELATION.SIGMA, values);
    }

    /**
     * Fetch records that have <code>LANGUAGE IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MRelation> fetchByLanguage(String... values) {
        return fetch(MRelation.M_RELATION.LANGUAGE, values);
    }

    /**
     * Fetch records that have <code>ACTIVE IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MRelation> fetchByActive(Boolean... values) {
        return fetch(MRelation.M_RELATION.ACTIVE, values);
    }

    /**
     * Fetch records that have <code>METADATA IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MRelation> fetchByMetadata(String... values) {
        return fetch(MRelation.M_RELATION.METADATA, values);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MRelation> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(MRelation.M_RELATION.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MRelation> fetchByCreatedBy(String... values) {
        return fetch(MRelation.M_RELATION.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MRelation> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(MRelation.M_RELATION.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MRelation> fetchByUpdatedBy(String... values) {
        return fetch(MRelation.M_RELATION.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MRelation>> fetchByKeyAsync(List<String> values) {
        return fetchAsync(MRelation.M_RELATION.KEY,values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code> asynchronously
     */
    public CompletableFuture<cn.vertxup.atom.domain.tables.pojos.MRelation> fetchOneByKeyAsync(String value) {
        return FutureTool.executeBlocking(h->h.complete(fetchOneByKey(value)),vertx());
    }

    /**
     * Fetch records that have <code>TYPE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MRelation>> fetchByTypeAsync(List<String> values) {
        return fetchAsync(MRelation.M_RELATION.TYPE,values);
    }

    /**
     * Fetch records that have <code>UPSTREAM IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MRelation>> fetchByUpstreamAsync(List<String> values) {
        return fetchAsync(MRelation.M_RELATION.UPSTREAM,values);
    }

    /**
     * Fetch records that have <code>DOWNSTREAM IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MRelation>> fetchByDownstreamAsync(List<String> values) {
        return fetchAsync(MRelation.M_RELATION.DOWNSTREAM,values);
    }

    /**
     * Fetch records that have <code>COMMENTS IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MRelation>> fetchByCommentsAsync(List<String> values) {
        return fetchAsync(MRelation.M_RELATION.COMMENTS,values);
    }

    /**
     * Fetch records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MRelation>> fetchBySigmaAsync(List<String> values) {
        return fetchAsync(MRelation.M_RELATION.SIGMA,values);
    }

    /**
     * Fetch records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MRelation>> fetchByLanguageAsync(List<String> values) {
        return fetchAsync(MRelation.M_RELATION.LANGUAGE,values);
    }

    /**
     * Fetch records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MRelation>> fetchByActiveAsync(List<Boolean> values) {
        return fetchAsync(MRelation.M_RELATION.ACTIVE,values);
    }

    /**
     * Fetch records that have <code>METADATA IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MRelation>> fetchByMetadataAsync(List<String> values) {
        return fetchAsync(MRelation.M_RELATION.METADATA,values);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MRelation>> fetchByCreatedAtAsync(List<LocalDateTime> values) {
        return fetchAsync(MRelation.M_RELATION.CREATED_AT,values);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MRelation>> fetchByCreatedByAsync(List<String> values) {
        return fetchAsync(MRelation.M_RELATION.CREATED_BY,values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MRelation>> fetchByUpdatedAtAsync(List<LocalDateTime> values) {
        return fetchAsync(MRelation.M_RELATION.UPDATED_AT,values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MRelation>> fetchByUpdatedByAsync(List<String> values) {
        return fetchAsync(MRelation.M_RELATION.UPDATED_BY,values);
    }

    private io.vertx.core.Vertx vertx;

    @Override
    public void setVertx(io.vertx.core.Vertx vertx) {
        this.vertx = vertx;
    }

    @Override
    public io.vertx.core.Vertx vertx() {
        return this.vertx;
    }

}
