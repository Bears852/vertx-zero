/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.atom.domain.tables.daos;


import cn.vertxup.atom.domain.tables.MModel;
import cn.vertxup.atom.domain.tables.records.MModelRecord;

import io.github.jklingsporn.vertx.jooq.future.VertxDAO;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


import java.util.concurrent.CompletableFuture;
import io.github.jklingsporn.vertx.jooq.future.util.FutureTool;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MModelDao extends DAOImpl<MModelRecord, cn.vertxup.atom.domain.tables.pojos.MModel, String> implements VertxDAO<cn.vertxup.atom.domain.tables.records.MModelRecord,cn.vertxup.atom.domain.tables.pojos.MModel,java.lang.String> {

    /**
     * Create a new MModelDao without any configuration
     */
    public MModelDao() {
        super(MModel.M_MODEL, cn.vertxup.atom.domain.tables.pojos.MModel.class);
    }

    /**
     * Create a new MModelDao with an attached configuration
     */
    public MModelDao(Configuration configuration) {
        super(MModel.M_MODEL, cn.vertxup.atom.domain.tables.pojos.MModel.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected String getId(cn.vertxup.atom.domain.tables.pojos.MModel object) {
        return object.getKey();
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MModel> fetchByKey(String... values) {
        return fetch(MModel.M_MODEL.KEY, values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code>
     */
    public cn.vertxup.atom.domain.tables.pojos.MModel fetchOneByKey(String value) {
        return fetchOne(MModel.M_MODEL.KEY, value);
    }

    /**
     * Fetch records that have <code>IDENTIFIER IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MModel> fetchByIdentifier(String... values) {
        return fetch(MModel.M_MODEL.IDENTIFIER, values);
    }

    /**
     * Fetch records that have <code>NAMESPACE IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MModel> fetchByNamespace(String... values) {
        return fetch(MModel.M_MODEL.NAMESPACE, values);
    }

    /**
     * Fetch records that have <code>NAME IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MModel> fetchByName(String... values) {
        return fetch(MModel.M_MODEL.NAME, values);
    }

    /**
     * Fetch records that have <code>ALIAS IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MModel> fetchByAlias(String... values) {
        return fetch(MModel.M_MODEL.ALIAS, values);
    }

    /**
     * Fetch records that have <code>TYPE IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MModel> fetchByType(String... values) {
        return fetch(MModel.M_MODEL.TYPE, values);
    }

    /**
     * Fetch records that have <code>COMMENTS IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MModel> fetchByComments(String... values) {
        return fetch(MModel.M_MODEL.COMMENTS, values);
    }

    /**
     * Fetch records that have <code>CATEGORY_TREE IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MModel> fetchByCategoryTree(String... values) {
        return fetch(MModel.M_MODEL.CATEGORY_TREE, values);
    }

    /**
     * Fetch records that have <code>CATEGORY_ID IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MModel> fetchByCategoryId(String... values) {
        return fetch(MModel.M_MODEL.CATEGORY_ID, values);
    }

    /**
     * Fetch records that have <code>RULE_UNIQUE IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MModel> fetchByRuleUnique(String... values) {
        return fetch(MModel.M_MODEL.RULE_UNIQUE, values);
    }

    /**
     * Fetch records that have <code>IS_TRACK IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MModel> fetchByIsTrack(Boolean... values) {
        return fetch(MModel.M_MODEL.IS_TRACK, values);
    }

    /**
     * Fetch records that have <code>SPIDER IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MModel> fetchBySpider(String... values) {
        return fetch(MModel.M_MODEL.SPIDER, values);
    }

    /**
     * Fetch records that have <code>SPIDER_COMPONENT IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MModel> fetchBySpiderComponent(String... values) {
        return fetch(MModel.M_MODEL.SPIDER_COMPONENT, values);
    }

    /**
     * Fetch records that have <code>SIGMA IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MModel> fetchBySigma(String... values) {
        return fetch(MModel.M_MODEL.SIGMA, values);
    }

    /**
     * Fetch records that have <code>LANGUAGE IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MModel> fetchByLanguage(String... values) {
        return fetch(MModel.M_MODEL.LANGUAGE, values);
    }

    /**
     * Fetch records that have <code>ACTIVE IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MModel> fetchByActive(Boolean... values) {
        return fetch(MModel.M_MODEL.ACTIVE, values);
    }

    /**
     * Fetch records that have <code>METADATA IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MModel> fetchByMetadata(String... values) {
        return fetch(MModel.M_MODEL.METADATA, values);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MModel> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(MModel.M_MODEL.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MModel> fetchByCreatedBy(String... values) {
        return fetch(MModel.M_MODEL.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MModel> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(MModel.M_MODEL.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MModel> fetchByUpdatedBy(String... values) {
        return fetch(MModel.M_MODEL.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MModel>> fetchByKeyAsync(List<String> values) {
        return fetchAsync(MModel.M_MODEL.KEY,values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code> asynchronously
     */
    public CompletableFuture<cn.vertxup.atom.domain.tables.pojos.MModel> fetchOneByKeyAsync(String value) {
        return FutureTool.executeBlocking(h->h.complete(fetchOneByKey(value)),vertx());
    }

    /**
     * Fetch records that have <code>IDENTIFIER IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MModel>> fetchByIdentifierAsync(List<String> values) {
        return fetchAsync(MModel.M_MODEL.IDENTIFIER,values);
    }

    /**
     * Fetch records that have <code>NAMESPACE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MModel>> fetchByNamespaceAsync(List<String> values) {
        return fetchAsync(MModel.M_MODEL.NAMESPACE,values);
    }

    /**
     * Fetch records that have <code>NAME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MModel>> fetchByNameAsync(List<String> values) {
        return fetchAsync(MModel.M_MODEL.NAME,values);
    }

    /**
     * Fetch records that have <code>ALIAS IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MModel>> fetchByAliasAsync(List<String> values) {
        return fetchAsync(MModel.M_MODEL.ALIAS,values);
    }

    /**
     * Fetch records that have <code>TYPE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MModel>> fetchByTypeAsync(List<String> values) {
        return fetchAsync(MModel.M_MODEL.TYPE,values);
    }

    /**
     * Fetch records that have <code>COMMENTS IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MModel>> fetchByCommentsAsync(List<String> values) {
        return fetchAsync(MModel.M_MODEL.COMMENTS,values);
    }

    /**
     * Fetch records that have <code>CATEGORY_TREE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MModel>> fetchByCategoryTreeAsync(List<String> values) {
        return fetchAsync(MModel.M_MODEL.CATEGORY_TREE,values);
    }

    /**
     * Fetch records that have <code>CATEGORY_ID IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MModel>> fetchByCategoryIdAsync(List<String> values) {
        return fetchAsync(MModel.M_MODEL.CATEGORY_ID,values);
    }

    /**
     * Fetch records that have <code>RULE_UNIQUE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MModel>> fetchByRuleUniqueAsync(List<String> values) {
        return fetchAsync(MModel.M_MODEL.RULE_UNIQUE,values);
    }

    /**
     * Fetch records that have <code>IS_TRACK IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MModel>> fetchByIsTrackAsync(List<Boolean> values) {
        return fetchAsync(MModel.M_MODEL.IS_TRACK,values);
    }

    /**
     * Fetch records that have <code>SPIDER IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MModel>> fetchBySpiderAsync(List<String> values) {
        return fetchAsync(MModel.M_MODEL.SPIDER,values);
    }

    /**
     * Fetch records that have <code>SPIDER_COMPONENT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MModel>> fetchBySpiderComponentAsync(List<String> values) {
        return fetchAsync(MModel.M_MODEL.SPIDER_COMPONENT,values);
    }

    /**
     * Fetch records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MModel>> fetchBySigmaAsync(List<String> values) {
        return fetchAsync(MModel.M_MODEL.SIGMA,values);
    }

    /**
     * Fetch records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MModel>> fetchByLanguageAsync(List<String> values) {
        return fetchAsync(MModel.M_MODEL.LANGUAGE,values);
    }

    /**
     * Fetch records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MModel>> fetchByActiveAsync(List<Boolean> values) {
        return fetchAsync(MModel.M_MODEL.ACTIVE,values);
    }

    /**
     * Fetch records that have <code>METADATA IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MModel>> fetchByMetadataAsync(List<String> values) {
        return fetchAsync(MModel.M_MODEL.METADATA,values);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MModel>> fetchByCreatedAtAsync(List<LocalDateTime> values) {
        return fetchAsync(MModel.M_MODEL.CREATED_AT,values);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MModel>> fetchByCreatedByAsync(List<String> values) {
        return fetchAsync(MModel.M_MODEL.CREATED_BY,values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MModel>> fetchByUpdatedAtAsync(List<LocalDateTime> values) {
        return fetchAsync(MModel.M_MODEL.UPDATED_AT,values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MModel>> fetchByUpdatedByAsync(List<String> values) {
        return fetchAsync(MModel.M_MODEL.UPDATED_BY,values);
    }

    private io.vertx.core.Vertx vertx;

    @Override
    public void setVertx(io.vertx.core.Vertx vertx) {
        this.vertx = vertx;
    }

    @Override
    public io.vertx.core.Vertx vertx() {
        return this.vertx;
    }

}
