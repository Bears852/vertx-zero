/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.atom.domain.tables.daos;


import cn.vertxup.atom.domain.tables.MEntity;
import cn.vertxup.atom.domain.tables.records.MEntityRecord;

import io.github.jklingsporn.vertx.jooq.future.VertxDAO;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


import java.util.concurrent.CompletableFuture;
import io.github.jklingsporn.vertx.jooq.future.util.FutureTool;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MEntityDao extends DAOImpl<MEntityRecord, cn.vertxup.atom.domain.tables.pojos.MEntity, String> implements VertxDAO<cn.vertxup.atom.domain.tables.records.MEntityRecord,cn.vertxup.atom.domain.tables.pojos.MEntity,java.lang.String> {

    /**
     * Create a new MEntityDao without any configuration
     */
    public MEntityDao() {
        super(MEntity.M_ENTITY, cn.vertxup.atom.domain.tables.pojos.MEntity.class);
    }

    /**
     * Create a new MEntityDao with an attached configuration
     */
    public MEntityDao(Configuration configuration) {
        super(MEntity.M_ENTITY, cn.vertxup.atom.domain.tables.pojos.MEntity.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected String getId(cn.vertxup.atom.domain.tables.pojos.MEntity object) {
        return object.getKey();
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MEntity> fetchByKey(String... values) {
        return fetch(MEntity.M_ENTITY.KEY, values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code>
     */
    public cn.vertxup.atom.domain.tables.pojos.MEntity fetchOneByKey(String value) {
        return fetchOne(MEntity.M_ENTITY.KEY, value);
    }

    /**
     * Fetch records that have <code>IDENTIFIER IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MEntity> fetchByIdentifier(String... values) {
        return fetch(MEntity.M_ENTITY.IDENTIFIER, values);
    }

    /**
     * Fetch records that have <code>NAMESPACE IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MEntity> fetchByNamespace(String... values) {
        return fetch(MEntity.M_ENTITY.NAMESPACE, values);
    }

    /**
     * Fetch records that have <code>NAME IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MEntity> fetchByName(String... values) {
        return fetch(MEntity.M_ENTITY.NAME, values);
    }

    /**
     * Fetch records that have <code>TYPE IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MEntity> fetchByType(String... values) {
        return fetch(MEntity.M_ENTITY.TYPE, values);
    }

    /**
     * Fetch records that have <code>TABLE_NAME IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MEntity> fetchByTableName(String... values) {
        return fetch(MEntity.M_ENTITY.TABLE_NAME, values);
    }

    /**
     * Fetch records that have <code>COMMENTS IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MEntity> fetchByComments(String... values) {
        return fetch(MEntity.M_ENTITY.COMMENTS, values);
    }

    /**
     * Fetch records that have <code>SIGMA IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MEntity> fetchBySigma(String... values) {
        return fetch(MEntity.M_ENTITY.SIGMA, values);
    }

    /**
     * Fetch records that have <code>LANGUAGE IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MEntity> fetchByLanguage(String... values) {
        return fetch(MEntity.M_ENTITY.LANGUAGE, values);
    }

    /**
     * Fetch records that have <code>ACTIVE IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MEntity> fetchByActive(Boolean... values) {
        return fetch(MEntity.M_ENTITY.ACTIVE, values);
    }

    /**
     * Fetch records that have <code>METADATA IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MEntity> fetchByMetadata(String... values) {
        return fetch(MEntity.M_ENTITY.METADATA, values);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MEntity> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(MEntity.M_ENTITY.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MEntity> fetchByCreatedBy(String... values) {
        return fetch(MEntity.M_ENTITY.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MEntity> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(MEntity.M_ENTITY.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MEntity> fetchByUpdatedBy(String... values) {
        return fetch(MEntity.M_ENTITY.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MEntity>> fetchByKeyAsync(List<String> values) {
        return fetchAsync(MEntity.M_ENTITY.KEY,values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code> asynchronously
     */
    public CompletableFuture<cn.vertxup.atom.domain.tables.pojos.MEntity> fetchOneByKeyAsync(String value) {
        return FutureTool.executeBlocking(h->h.complete(fetchOneByKey(value)),vertx());
    }

    /**
     * Fetch records that have <code>IDENTIFIER IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MEntity>> fetchByIdentifierAsync(List<String> values) {
        return fetchAsync(MEntity.M_ENTITY.IDENTIFIER,values);
    }

    /**
     * Fetch records that have <code>NAMESPACE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MEntity>> fetchByNamespaceAsync(List<String> values) {
        return fetchAsync(MEntity.M_ENTITY.NAMESPACE,values);
    }

    /**
     * Fetch records that have <code>NAME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MEntity>> fetchByNameAsync(List<String> values) {
        return fetchAsync(MEntity.M_ENTITY.NAME,values);
    }

    /**
     * Fetch records that have <code>TYPE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MEntity>> fetchByTypeAsync(List<String> values) {
        return fetchAsync(MEntity.M_ENTITY.TYPE,values);
    }

    /**
     * Fetch records that have <code>TABLE_NAME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MEntity>> fetchByTableNameAsync(List<String> values) {
        return fetchAsync(MEntity.M_ENTITY.TABLE_NAME,values);
    }

    /**
     * Fetch records that have <code>COMMENTS IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MEntity>> fetchByCommentsAsync(List<String> values) {
        return fetchAsync(MEntity.M_ENTITY.COMMENTS,values);
    }

    /**
     * Fetch records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MEntity>> fetchBySigmaAsync(List<String> values) {
        return fetchAsync(MEntity.M_ENTITY.SIGMA,values);
    }

    /**
     * Fetch records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MEntity>> fetchByLanguageAsync(List<String> values) {
        return fetchAsync(MEntity.M_ENTITY.LANGUAGE,values);
    }

    /**
     * Fetch records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MEntity>> fetchByActiveAsync(List<Boolean> values) {
        return fetchAsync(MEntity.M_ENTITY.ACTIVE,values);
    }

    /**
     * Fetch records that have <code>METADATA IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MEntity>> fetchByMetadataAsync(List<String> values) {
        return fetchAsync(MEntity.M_ENTITY.METADATA,values);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MEntity>> fetchByCreatedAtAsync(List<LocalDateTime> values) {
        return fetchAsync(MEntity.M_ENTITY.CREATED_AT,values);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MEntity>> fetchByCreatedByAsync(List<String> values) {
        return fetchAsync(MEntity.M_ENTITY.CREATED_BY,values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MEntity>> fetchByUpdatedAtAsync(List<LocalDateTime> values) {
        return fetchAsync(MEntity.M_ENTITY.UPDATED_AT,values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MEntity>> fetchByUpdatedByAsync(List<String> values) {
        return fetchAsync(MEntity.M_ENTITY.UPDATED_BY,values);
    }

    private io.vertx.core.Vertx vertx;

    @Override
    public void setVertx(io.vertx.core.Vertx vertx) {
        this.vertx = vertx;
    }

    @Override
    public io.vertx.core.Vertx vertx() {
        return this.vertx;
    }

}
