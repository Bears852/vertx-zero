/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.atom.domain.tables.interfaces;


import java.io.Serializable;
import java.time.LocalDateTime;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IMEntity extends Serializable {

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.KEY</code>. 「key」- 实体ID
     */
    public IMEntity setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.KEY</code>. 「key」- 实体ID
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.IDENTIFIER</code>. 「identifier」- 当前实体全局唯一ID
     */
    public IMEntity setIdentifier(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.IDENTIFIER</code>. 「identifier」- 当前实体全局唯一ID
     */
    public String getIdentifier();

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.NAMESPACE</code>. 「namespace」- 当前实体使用的名空间
     */
    public IMEntity setNamespace(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.NAMESPACE</code>. 「namespace」- 当前实体使用的名空间
     */
    public String getNamespace();

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.NAME</code>. 「name」- 当前实体的名称
     */
    public IMEntity setName(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.NAME</code>. 「name」- 当前实体的名称
     */
    public String getName();

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.TYPE</code>. 「type」- 实体类型：ENTITY/RELATION
     */
    public IMEntity setType(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.TYPE</code>. 「type」- 实体类型：ENTITY/RELATION
     */
    public String getType();

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.TABLE_NAME</code>. 「tableName」- 实体对应的数据库表
     */
    public IMEntity setTableName(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.TABLE_NAME</code>. 「tableName」- 实体对应的数据库表
     */
    public String getTableName();

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.COMMENTS</code>. 「comments」- 数据库表备注
     */
    public IMEntity setComments(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.COMMENTS</code>. 「comments」- 数据库表备注
     */
    public String getComments();

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.SIGMA</code>. 「sigma」- 统一标识
     */
    public IMEntity setSigma(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.SIGMA</code>. 「sigma」- 统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.LANGUAGE</code>. 「language」- 使用的语言
     */
    public IMEntity setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.LANGUAGE</code>. 「language」- 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.ACTIVE</code>. 「active」- 是否启用
     */
    public IMEntity setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.METADATA</code>. 「metadata」- 附加配置数据
     */
    public IMEntity setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.METADATA</code>. 「metadata」- 附加配置数据
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public IMEntity setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public IMEntity setCreatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public IMEntity setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public IMEntity setUpdatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public String getUpdatedBy();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface IMEntity
     */
    public void from(cn.vertxup.atom.domain.tables.interfaces.IMEntity from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface IMEntity
     */
    public <E extends cn.vertxup.atom.domain.tables.interfaces.IMEntity> E into(E into);

    default IMEntity fromJson(io.vertx.core.json.JsonObject json) {
        setKey(json.getString("KEY"));
        setIdentifier(json.getString("IDENTIFIER"));
        setNamespace(json.getString("NAMESPACE"));
        setName(json.getString("NAME"));
        setType(json.getString("TYPE"));
        setTableName(json.getString("TABLE_NAME"));
        setComments(json.getString("COMMENTS"));
        setSigma(json.getString("SIGMA"));
        setLanguage(json.getString("LANGUAGE"));
        setActive(json.getBoolean("ACTIVE"));
        setMetadata(json.getString("METADATA"));
        // Omitting unrecognized type java.time.LocalDateTime for column CREATED_AT!
        setCreatedBy(json.getString("CREATED_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column UPDATED_AT!
        setUpdatedBy(json.getString("UPDATED_BY"));
        return this;
    }


    default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("KEY",getKey());
        json.put("IDENTIFIER",getIdentifier());
        json.put("NAMESPACE",getNamespace());
        json.put("NAME",getName());
        json.put("TYPE",getType());
        json.put("TABLE_NAME",getTableName());
        json.put("COMMENTS",getComments());
        json.put("SIGMA",getSigma());
        json.put("LANGUAGE",getLanguage());
        json.put("ACTIVE",getActive());
        json.put("METADATA",getMetadata());
        // Omitting unrecognized type java.time.LocalDateTime for column CREATED_AT!
        json.put("CREATED_BY",getCreatedBy());
        // Omitting unrecognized type java.time.LocalDateTime for column UPDATED_AT!
        json.put("UPDATED_BY",getUpdatedBy());
        return json;
    }

}
