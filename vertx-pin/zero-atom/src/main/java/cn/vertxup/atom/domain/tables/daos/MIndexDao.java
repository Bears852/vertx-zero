/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.atom.domain.tables.daos;


import cn.vertxup.atom.domain.tables.MIndex;
import cn.vertxup.atom.domain.tables.records.MIndexRecord;

import io.github.jklingsporn.vertx.jooq.future.VertxDAO;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


import java.util.concurrent.CompletableFuture;
import io.github.jklingsporn.vertx.jooq.future.util.FutureTool;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MIndexDao extends DAOImpl<MIndexRecord, cn.vertxup.atom.domain.tables.pojos.MIndex, String> implements VertxDAO<cn.vertxup.atom.domain.tables.records.MIndexRecord,cn.vertxup.atom.domain.tables.pojos.MIndex,java.lang.String> {

    /**
     * Create a new MIndexDao without any configuration
     */
    public MIndexDao() {
        super(MIndex.M_INDEX, cn.vertxup.atom.domain.tables.pojos.MIndex.class);
    }

    /**
     * Create a new MIndexDao with an attached configuration
     */
    public MIndexDao(Configuration configuration) {
        super(MIndex.M_INDEX, cn.vertxup.atom.domain.tables.pojos.MIndex.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected String getId(cn.vertxup.atom.domain.tables.pojos.MIndex object) {
        return object.getKey();
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MIndex> fetchByKey(String... values) {
        return fetch(MIndex.M_INDEX.KEY, values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code>
     */
    public cn.vertxup.atom.domain.tables.pojos.MIndex fetchOneByKey(String value) {
        return fetchOne(MIndex.M_INDEX.KEY, value);
    }

    /**
     * Fetch records that have <code>NAME IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MIndex> fetchByName(String... values) {
        return fetch(MIndex.M_INDEX.NAME, values);
    }

    /**
     * Fetch records that have <code>TYPE IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MIndex> fetchByType(String... values) {
        return fetch(MIndex.M_INDEX.TYPE, values);
    }

    /**
     * Fetch records that have <code>CLUSTERED IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MIndex> fetchByClustered(Boolean... values) {
        return fetch(MIndex.M_INDEX.CLUSTERED, values);
    }

    /**
     * Fetch records that have <code>COLUMNS IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MIndex> fetchByColumns(String... values) {
        return fetch(MIndex.M_INDEX.COLUMNS, values);
    }

    /**
     * Fetch records that have <code>ENTITY_ID IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MIndex> fetchByEntityId(String... values) {
        return fetch(MIndex.M_INDEX.ENTITY_ID, values);
    }

    /**
     * Fetch records that have <code>COMMENTS IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MIndex> fetchByComments(String... values) {
        return fetch(MIndex.M_INDEX.COMMENTS, values);
    }

    /**
     * Fetch records that have <code>SIGMA IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MIndex> fetchBySigma(String... values) {
        return fetch(MIndex.M_INDEX.SIGMA, values);
    }

    /**
     * Fetch records that have <code>LANGUAGE IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MIndex> fetchByLanguage(String... values) {
        return fetch(MIndex.M_INDEX.LANGUAGE, values);
    }

    /**
     * Fetch records that have <code>ACTIVE IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MIndex> fetchByActive(Boolean... values) {
        return fetch(MIndex.M_INDEX.ACTIVE, values);
    }

    /**
     * Fetch records that have <code>METADATA IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MIndex> fetchByMetadata(String... values) {
        return fetch(MIndex.M_INDEX.METADATA, values);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MIndex> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(MIndex.M_INDEX.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MIndex> fetchByCreatedBy(String... values) {
        return fetch(MIndex.M_INDEX.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MIndex> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(MIndex.M_INDEX.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MIndex> fetchByUpdatedBy(String... values) {
        return fetch(MIndex.M_INDEX.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MIndex>> fetchByKeyAsync(List<String> values) {
        return fetchAsync(MIndex.M_INDEX.KEY,values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code> asynchronously
     */
    public CompletableFuture<cn.vertxup.atom.domain.tables.pojos.MIndex> fetchOneByKeyAsync(String value) {
        return FutureTool.executeBlocking(h->h.complete(fetchOneByKey(value)),vertx());
    }

    /**
     * Fetch records that have <code>NAME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MIndex>> fetchByNameAsync(List<String> values) {
        return fetchAsync(MIndex.M_INDEX.NAME,values);
    }

    /**
     * Fetch records that have <code>TYPE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MIndex>> fetchByTypeAsync(List<String> values) {
        return fetchAsync(MIndex.M_INDEX.TYPE,values);
    }

    /**
     * Fetch records that have <code>CLUSTERED IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MIndex>> fetchByClusteredAsync(List<Boolean> values) {
        return fetchAsync(MIndex.M_INDEX.CLUSTERED,values);
    }

    /**
     * Fetch records that have <code>COLUMNS IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MIndex>> fetchByColumnsAsync(List<String> values) {
        return fetchAsync(MIndex.M_INDEX.COLUMNS,values);
    }

    /**
     * Fetch records that have <code>ENTITY_ID IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MIndex>> fetchByEntityIdAsync(List<String> values) {
        return fetchAsync(MIndex.M_INDEX.ENTITY_ID,values);
    }

    /**
     * Fetch records that have <code>COMMENTS IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MIndex>> fetchByCommentsAsync(List<String> values) {
        return fetchAsync(MIndex.M_INDEX.COMMENTS,values);
    }

    /**
     * Fetch records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MIndex>> fetchBySigmaAsync(List<String> values) {
        return fetchAsync(MIndex.M_INDEX.SIGMA,values);
    }

    /**
     * Fetch records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MIndex>> fetchByLanguageAsync(List<String> values) {
        return fetchAsync(MIndex.M_INDEX.LANGUAGE,values);
    }

    /**
     * Fetch records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MIndex>> fetchByActiveAsync(List<Boolean> values) {
        return fetchAsync(MIndex.M_INDEX.ACTIVE,values);
    }

    /**
     * Fetch records that have <code>METADATA IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MIndex>> fetchByMetadataAsync(List<String> values) {
        return fetchAsync(MIndex.M_INDEX.METADATA,values);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MIndex>> fetchByCreatedAtAsync(List<LocalDateTime> values) {
        return fetchAsync(MIndex.M_INDEX.CREATED_AT,values);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MIndex>> fetchByCreatedByAsync(List<String> values) {
        return fetchAsync(MIndex.M_INDEX.CREATED_BY,values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MIndex>> fetchByUpdatedAtAsync(List<LocalDateTime> values) {
        return fetchAsync(MIndex.M_INDEX.UPDATED_AT,values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MIndex>> fetchByUpdatedByAsync(List<String> values) {
        return fetchAsync(MIndex.M_INDEX.UPDATED_BY,values);
    }

    private io.vertx.core.Vertx vertx;

    @Override
    public void setVertx(io.vertx.core.Vertx vertx) {
        this.vertx = vertx;
    }

    @Override
    public io.vertx.core.Vertx vertx() {
        return this.vertx;
    }

}
