/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.atom.domain.tables.daos;


import cn.vertxup.atom.domain.tables.MJoin;
import cn.vertxup.atom.domain.tables.records.MJoinRecord;

import io.github.jklingsporn.vertx.jooq.future.VertxDAO;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.Record4;
import org.jooq.impl.DAOImpl;


import java.util.concurrent.CompletableFuture;
import io.github.jklingsporn.vertx.jooq.future.util.FutureTool;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MJoinDao extends DAOImpl<MJoinRecord, cn.vertxup.atom.domain.tables.pojos.MJoin, Record4<String, String, String, String>> implements VertxDAO<cn.vertxup.atom.domain.tables.records.MJoinRecord,cn.vertxup.atom.domain.tables.pojos.MJoin,org.jooq.Record4<java.lang.String, java.lang.String, java.lang.String, java.lang.String>> {

    /**
     * Create a new MJoinDao without any configuration
     */
    public MJoinDao() {
        super(MJoin.M_JOIN, cn.vertxup.atom.domain.tables.pojos.MJoin.class);
    }

    /**
     * Create a new MJoinDao with an attached configuration
     */
    public MJoinDao(Configuration configuration) {
        super(MJoin.M_JOIN, cn.vertxup.atom.domain.tables.pojos.MJoin.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Record4<String, String, String, String> getId(cn.vertxup.atom.domain.tables.pojos.MJoin object) {
        return compositeKeyRecord(object.getModel(), object.getEntity(), object.getEntityKey(), object.getNamespace());
    }

    /**
     * Fetch records that have <code>MODEL IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MJoin> fetchByModel(String... values) {
        return fetch(MJoin.M_JOIN.MODEL, values);
    }

    /**
     * Fetch records that have <code>ENTITY IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MJoin> fetchByEntity(String... values) {
        return fetch(MJoin.M_JOIN.ENTITY, values);
    }

    /**
     * Fetch records that have <code>ENTITY_KEY IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MJoin> fetchByEntityKey(String... values) {
        return fetch(MJoin.M_JOIN.ENTITY_KEY, values);
    }

    /**
     * Fetch records that have <code>PRIORITY IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MJoin> fetchByPriority(Integer... values) {
        return fetch(MJoin.M_JOIN.PRIORITY, values);
    }

    /**
     * Fetch records that have <code>NAMESPACE IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MJoin> fetchByNamespace(String... values) {
        return fetch(MJoin.M_JOIN.NAMESPACE, values);
    }

    /**
     * Fetch records that have <code>MODEL IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MJoin>> fetchByModelAsync(List<String> values) {
        return fetchAsync(MJoin.M_JOIN.MODEL,values);
    }

    /**
     * Fetch records that have <code>ENTITY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MJoin>> fetchByEntityAsync(List<String> values) {
        return fetchAsync(MJoin.M_JOIN.ENTITY,values);
    }

    /**
     * Fetch records that have <code>ENTITY_KEY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MJoin>> fetchByEntityKeyAsync(List<String> values) {
        return fetchAsync(MJoin.M_JOIN.ENTITY_KEY,values);
    }

    /**
     * Fetch records that have <code>PRIORITY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MJoin>> fetchByPriorityAsync(List<Integer> values) {
        return fetchAsync(MJoin.M_JOIN.PRIORITY,values);
    }

    /**
     * Fetch records that have <code>NAMESPACE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MJoin>> fetchByNamespaceAsync(List<String> values) {
        return fetchAsync(MJoin.M_JOIN.NAMESPACE,values);
    }

    private io.vertx.core.Vertx vertx;

    @Override
    public void setVertx(io.vertx.core.Vertx vertx) {
        this.vertx = vertx;
    }

    @Override
    public io.vertx.core.Vertx vertx() {
        return this.vertx;
    }

}
