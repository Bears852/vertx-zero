/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.lbs.domain.tables.daos;


import cn.vertxup.lbs.domain.tables.LState;
import cn.vertxup.lbs.domain.tables.records.LStateRecord;

import io.github.jklingsporn.vertx.jooq.future.VertxDAO;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


import java.util.concurrent.CompletableFuture;
import io.github.jklingsporn.vertx.jooq.future.util.FutureTool;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LStateDao extends DAOImpl<LStateRecord, cn.vertxup.lbs.domain.tables.pojos.LState, String> implements VertxDAO<cn.vertxup.lbs.domain.tables.records.LStateRecord,cn.vertxup.lbs.domain.tables.pojos.LState,java.lang.String> {

    /**
     * Create a new LStateDao without any configuration
     */
    public LStateDao() {
        super(LState.L_STATE, cn.vertxup.lbs.domain.tables.pojos.LState.class);
    }

    /**
     * Create a new LStateDao with an attached configuration
     */
    public LStateDao(Configuration configuration) {
        super(LState.L_STATE, cn.vertxup.lbs.domain.tables.pojos.LState.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected String getId(cn.vertxup.lbs.domain.tables.pojos.LState object) {
        return object.getKey();
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code>
     */
    public List<cn.vertxup.lbs.domain.tables.pojos.LState> fetchByKey(String... values) {
        return fetch(LState.L_STATE.KEY, values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code>
     */
    public cn.vertxup.lbs.domain.tables.pojos.LState fetchOneByKey(String value) {
        return fetchOne(LState.L_STATE.KEY, value);
    }

    /**
     * Fetch records that have <code>NAME IN (values)</code>
     */
    public List<cn.vertxup.lbs.domain.tables.pojos.LState> fetchByName(String... values) {
        return fetch(LState.L_STATE.NAME, values);
    }

    /**
     * Fetch records that have <code>CODE IN (values)</code>
     */
    public List<cn.vertxup.lbs.domain.tables.pojos.LState> fetchByCode(String... values) {
        return fetch(LState.L_STATE.CODE, values);
    }

    /**
     * Fetch records that have <code>ALIAS IN (values)</code>
     */
    public List<cn.vertxup.lbs.domain.tables.pojos.LState> fetchByAlias(String... values) {
        return fetch(LState.L_STATE.ALIAS, values);
    }

    /**
     * Fetch records that have <code>METADATA IN (values)</code>
     */
    public List<cn.vertxup.lbs.domain.tables.pojos.LState> fetchByMetadata(String... values) {
        return fetch(LState.L_STATE.METADATA, values);
    }

    /**
     * Fetch records that have <code>ORDER IN (values)</code>
     */
    public List<cn.vertxup.lbs.domain.tables.pojos.LState> fetchByOrder(Integer... values) {
        return fetch(LState.L_STATE.ORDER, values);
    }

    /**
     * Fetch records that have <code>COUNTRY_ID IN (values)</code>
     */
    public List<cn.vertxup.lbs.domain.tables.pojos.LState> fetchByCountryId(String... values) {
        return fetch(LState.L_STATE.COUNTRY_ID, values);
    }

    /**
     * Fetch records that have <code>ACTIVE IN (values)</code>
     */
    public List<cn.vertxup.lbs.domain.tables.pojos.LState> fetchByActive(Boolean... values) {
        return fetch(LState.L_STATE.ACTIVE, values);
    }

    /**
     * Fetch records that have <code>SIGMA IN (values)</code>
     */
    public List<cn.vertxup.lbs.domain.tables.pojos.LState> fetchBySigma(String... values) {
        return fetch(LState.L_STATE.SIGMA, values);
    }

    /**
     * Fetch records that have <code>LANGUAGE IN (values)</code>
     */
    public List<cn.vertxup.lbs.domain.tables.pojos.LState> fetchByLanguage(String... values) {
        return fetch(LState.L_STATE.LANGUAGE, values);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code>
     */
    public List<cn.vertxup.lbs.domain.tables.pojos.LState> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(LState.L_STATE.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code>
     */
    public List<cn.vertxup.lbs.domain.tables.pojos.LState> fetchByCreatedBy(String... values) {
        return fetch(LState.L_STATE.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code>
     */
    public List<cn.vertxup.lbs.domain.tables.pojos.LState> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(LState.L_STATE.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code>
     */
    public List<cn.vertxup.lbs.domain.tables.pojos.LState> fetchByUpdatedBy(String... values) {
        return fetch(LState.L_STATE.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.lbs.domain.tables.pojos.LState>> fetchByKeyAsync(List<String> values) {
        return fetchAsync(LState.L_STATE.KEY,values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code> asynchronously
     */
    public CompletableFuture<cn.vertxup.lbs.domain.tables.pojos.LState> fetchOneByKeyAsync(String value) {
        return FutureTool.executeBlocking(h->h.complete(fetchOneByKey(value)),vertx());
    }

    /**
     * Fetch records that have <code>NAME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.lbs.domain.tables.pojos.LState>> fetchByNameAsync(List<String> values) {
        return fetchAsync(LState.L_STATE.NAME,values);
    }

    /**
     * Fetch records that have <code>CODE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.lbs.domain.tables.pojos.LState>> fetchByCodeAsync(List<String> values) {
        return fetchAsync(LState.L_STATE.CODE,values);
    }

    /**
     * Fetch records that have <code>ALIAS IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.lbs.domain.tables.pojos.LState>> fetchByAliasAsync(List<String> values) {
        return fetchAsync(LState.L_STATE.ALIAS,values);
    }

    /**
     * Fetch records that have <code>METADATA IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.lbs.domain.tables.pojos.LState>> fetchByMetadataAsync(List<String> values) {
        return fetchAsync(LState.L_STATE.METADATA,values);
    }

    /**
     * Fetch records that have <code>ORDER IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.lbs.domain.tables.pojos.LState>> fetchByOrderAsync(List<Integer> values) {
        return fetchAsync(LState.L_STATE.ORDER,values);
    }

    /**
     * Fetch records that have <code>COUNTRY_ID IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.lbs.domain.tables.pojos.LState>> fetchByCountryIdAsync(List<String> values) {
        return fetchAsync(LState.L_STATE.COUNTRY_ID,values);
    }

    /**
     * Fetch records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.lbs.domain.tables.pojos.LState>> fetchByActiveAsync(List<Boolean> values) {
        return fetchAsync(LState.L_STATE.ACTIVE,values);
    }

    /**
     * Fetch records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.lbs.domain.tables.pojos.LState>> fetchBySigmaAsync(List<String> values) {
        return fetchAsync(LState.L_STATE.SIGMA,values);
    }

    /**
     * Fetch records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.lbs.domain.tables.pojos.LState>> fetchByLanguageAsync(List<String> values) {
        return fetchAsync(LState.L_STATE.LANGUAGE,values);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.lbs.domain.tables.pojos.LState>> fetchByCreatedAtAsync(List<LocalDateTime> values) {
        return fetchAsync(LState.L_STATE.CREATED_AT,values);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.lbs.domain.tables.pojos.LState>> fetchByCreatedByAsync(List<String> values) {
        return fetchAsync(LState.L_STATE.CREATED_BY,values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.lbs.domain.tables.pojos.LState>> fetchByUpdatedAtAsync(List<LocalDateTime> values) {
        return fetchAsync(LState.L_STATE.UPDATED_AT,values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.lbs.domain.tables.pojos.LState>> fetchByUpdatedByAsync(List<String> values) {
        return fetchAsync(LState.L_STATE.UPDATED_BY,values);
    }

    private io.vertx.core.Vertx vertx;

    @Override
    public void setVertx(io.vertx.core.Vertx vertx) {
        this.vertx = vertx;
    }

    @Override
    public io.vertx.core.Vertx vertx() {
        return this.vertx;
    }

}
