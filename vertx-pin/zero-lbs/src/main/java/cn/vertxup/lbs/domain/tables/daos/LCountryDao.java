/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.lbs.domain.tables.daos;


import cn.vertxup.lbs.domain.tables.LCountry;
import cn.vertxup.lbs.domain.tables.records.LCountryRecord;

import io.github.jklingsporn.vertx.jooq.future.VertxDAO;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


import java.util.concurrent.CompletableFuture;
import io.github.jklingsporn.vertx.jooq.future.util.FutureTool;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LCountryDao extends DAOImpl<LCountryRecord, cn.vertxup.lbs.domain.tables.pojos.LCountry, String> implements VertxDAO<cn.vertxup.lbs.domain.tables.records.LCountryRecord,cn.vertxup.lbs.domain.tables.pojos.LCountry,java.lang.String> {

    /**
     * Create a new LCountryDao without any configuration
     */
    public LCountryDao() {
        super(LCountry.L_COUNTRY, cn.vertxup.lbs.domain.tables.pojos.LCountry.class);
    }

    /**
     * Create a new LCountryDao with an attached configuration
     */
    public LCountryDao(Configuration configuration) {
        super(LCountry.L_COUNTRY, cn.vertxup.lbs.domain.tables.pojos.LCountry.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected String getId(cn.vertxup.lbs.domain.tables.pojos.LCountry object) {
        return object.getKey();
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code>
     */
    public List<cn.vertxup.lbs.domain.tables.pojos.LCountry> fetchByKey(String... values) {
        return fetch(LCountry.L_COUNTRY.KEY, values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code>
     */
    public cn.vertxup.lbs.domain.tables.pojos.LCountry fetchOneByKey(String value) {
        return fetchOne(LCountry.L_COUNTRY.KEY, value);
    }

    /**
     * Fetch records that have <code>NAME IN (values)</code>
     */
    public List<cn.vertxup.lbs.domain.tables.pojos.LCountry> fetchByName(String... values) {
        return fetch(LCountry.L_COUNTRY.NAME, values);
    }

    /**
     * Fetch records that have <code>CODE IN (values)</code>
     */
    public List<cn.vertxup.lbs.domain.tables.pojos.LCountry> fetchByCode(String... values) {
        return fetch(LCountry.L_COUNTRY.CODE, values);
    }

    /**
     * Fetch records that have <code>FLAG IN (values)</code>
     */
    public List<cn.vertxup.lbs.domain.tables.pojos.LCountry> fetchByFlag(String... values) {
        return fetch(LCountry.L_COUNTRY.FLAG, values);
    }

    /**
     * Fetch records that have <code>PHONE_PREFIX IN (values)</code>
     */
    public List<cn.vertxup.lbs.domain.tables.pojos.LCountry> fetchByPhonePrefix(String... values) {
        return fetch(LCountry.L_COUNTRY.PHONE_PREFIX, values);
    }

    /**
     * Fetch records that have <code>CURRENCY IN (values)</code>
     */
    public List<cn.vertxup.lbs.domain.tables.pojos.LCountry> fetchByCurrency(String... values) {
        return fetch(LCountry.L_COUNTRY.CURRENCY, values);
    }

    /**
     * Fetch records that have <code>METADATA IN (values)</code>
     */
    public List<cn.vertxup.lbs.domain.tables.pojos.LCountry> fetchByMetadata(String... values) {
        return fetch(LCountry.L_COUNTRY.METADATA, values);
    }

    /**
     * Fetch records that have <code>ORDER IN (values)</code>
     */
    public List<cn.vertxup.lbs.domain.tables.pojos.LCountry> fetchByOrder(Integer... values) {
        return fetch(LCountry.L_COUNTRY.ORDER, values);
    }

    /**
     * Fetch records that have <code>ACTIVE IN (values)</code>
     */
    public List<cn.vertxup.lbs.domain.tables.pojos.LCountry> fetchByActive(Boolean... values) {
        return fetch(LCountry.L_COUNTRY.ACTIVE, values);
    }

    /**
     * Fetch records that have <code>SIGMA IN (values)</code>
     */
    public List<cn.vertxup.lbs.domain.tables.pojos.LCountry> fetchBySigma(String... values) {
        return fetch(LCountry.L_COUNTRY.SIGMA, values);
    }

    /**
     * Fetch records that have <code>LANGUAGE IN (values)</code>
     */
    public List<cn.vertxup.lbs.domain.tables.pojos.LCountry> fetchByLanguage(String... values) {
        return fetch(LCountry.L_COUNTRY.LANGUAGE, values);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code>
     */
    public List<cn.vertxup.lbs.domain.tables.pojos.LCountry> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(LCountry.L_COUNTRY.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code>
     */
    public List<cn.vertxup.lbs.domain.tables.pojos.LCountry> fetchByCreatedBy(String... values) {
        return fetch(LCountry.L_COUNTRY.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code>
     */
    public List<cn.vertxup.lbs.domain.tables.pojos.LCountry> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(LCountry.L_COUNTRY.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code>
     */
    public List<cn.vertxup.lbs.domain.tables.pojos.LCountry> fetchByUpdatedBy(String... values) {
        return fetch(LCountry.L_COUNTRY.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> fetchByKeyAsync(List<String> values) {
        return fetchAsync(LCountry.L_COUNTRY.KEY,values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code> asynchronously
     */
    public CompletableFuture<cn.vertxup.lbs.domain.tables.pojos.LCountry> fetchOneByKeyAsync(String value) {
        return FutureTool.executeBlocking(h->h.complete(fetchOneByKey(value)),vertx());
    }

    /**
     * Fetch records that have <code>NAME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> fetchByNameAsync(List<String> values) {
        return fetchAsync(LCountry.L_COUNTRY.NAME,values);
    }

    /**
     * Fetch records that have <code>CODE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> fetchByCodeAsync(List<String> values) {
        return fetchAsync(LCountry.L_COUNTRY.CODE,values);
    }

    /**
     * Fetch records that have <code>FLAG IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> fetchByFlagAsync(List<String> values) {
        return fetchAsync(LCountry.L_COUNTRY.FLAG,values);
    }

    /**
     * Fetch records that have <code>PHONE_PREFIX IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> fetchByPhonePrefixAsync(List<String> values) {
        return fetchAsync(LCountry.L_COUNTRY.PHONE_PREFIX,values);
    }

    /**
     * Fetch records that have <code>CURRENCY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> fetchByCurrencyAsync(List<String> values) {
        return fetchAsync(LCountry.L_COUNTRY.CURRENCY,values);
    }

    /**
     * Fetch records that have <code>METADATA IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> fetchByMetadataAsync(List<String> values) {
        return fetchAsync(LCountry.L_COUNTRY.METADATA,values);
    }

    /**
     * Fetch records that have <code>ORDER IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> fetchByOrderAsync(List<Integer> values) {
        return fetchAsync(LCountry.L_COUNTRY.ORDER,values);
    }

    /**
     * Fetch records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> fetchByActiveAsync(List<Boolean> values) {
        return fetchAsync(LCountry.L_COUNTRY.ACTIVE,values);
    }

    /**
     * Fetch records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> fetchBySigmaAsync(List<String> values) {
        return fetchAsync(LCountry.L_COUNTRY.SIGMA,values);
    }

    /**
     * Fetch records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> fetchByLanguageAsync(List<String> values) {
        return fetchAsync(LCountry.L_COUNTRY.LANGUAGE,values);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> fetchByCreatedAtAsync(List<LocalDateTime> values) {
        return fetchAsync(LCountry.L_COUNTRY.CREATED_AT,values);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> fetchByCreatedByAsync(List<String> values) {
        return fetchAsync(LCountry.L_COUNTRY.CREATED_BY,values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> fetchByUpdatedAtAsync(List<LocalDateTime> values) {
        return fetchAsync(LCountry.L_COUNTRY.UPDATED_AT,values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> fetchByUpdatedByAsync(List<String> values) {
        return fetchAsync(LCountry.L_COUNTRY.UPDATED_BY,values);
    }

    private io.vertx.core.Vertx vertx;

    @Override
    public void setVertx(io.vertx.core.Vertx vertx) {
        this.vertx = vertx;
    }

    @Override
    public io.vertx.core.Vertx vertx() {
        return this.vertx;
    }

}
