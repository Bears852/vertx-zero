/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.jet.domain.tables;


import cn.vertxup.jet.domain.Db;
import cn.vertxup.jet.domain.Indexes;
import cn.vertxup.jet.domain.Keys;
import cn.vertxup.jet.domain.tables.records.IJobRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.10.8"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class IJob extends TableImpl<IJobRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.I_JOB</code>
     */
    public static final IJob I_JOB = new IJob();
    private static final long serialVersionUID = 1435080500;
    /**
     * The column <code>DB_ETERNAL.I_JOB.KEY</code>. 「key」- 任务ID
     */
    public final TableField<IJobRecord, String> KEY = createField("KEY", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 任务ID");
    /**
     * The column <code>DB_ETERNAL.I_JOB.NAMESPACE</code>. 「namespace」- 任务所在名空间
     */
    public final TableField<IJobRecord, String> NAMESPACE = createField("NAMESPACE", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「namespace」- 任务所在名空间");
    /**
     * The column <code>DB_ETERNAL.I_JOB.NAME</code>. 「name」- 任务名称
     */
    public final TableField<IJobRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「name」- 任务名称");
    /**
     * The column <code>DB_ETERNAL.I_JOB.CODE</code>. 「comment」- 任务编码
     */
    public final TableField<IJobRecord, String> CODE = createField("CODE", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「comment」- 任务编码");
    /**
     * The column <code>DB_ETERNAL.I_JOB.TYPE</code>. 「type」- 任务类型
     */
    public final TableField<IJobRecord, String> TYPE = createField("TYPE", org.jooq.impl.SQLDataType.VARCHAR(20), this, "「type」- 任务类型");
    /**
     * The column <code>DB_ETERNAL.I_JOB.COMMENT</code>. 「comment」- 备注信息
     */
    public final TableField<IJobRecord, String> COMMENT = createField("COMMENT", org.jooq.impl.SQLDataType.CLOB, this, "「comment」- 备注信息");
    /**
     * The column <code>DB_ETERNAL.I_JOB.ADDITIONAL</code>. 「additional」- 额外配置信息
     */
    public final TableField<IJobRecord, String> ADDITIONAL = createField("ADDITIONAL", org.jooq.impl.SQLDataType.CLOB, this, "「additional」- 额外配置信息");
    /**
     * The column <code>DB_ETERNAL.I_JOB.RUN_AT</code>. 「runAt」- 定时任务中的JOB时间
     */
    public final TableField<IJobRecord, LocalTime> RUN_AT = createField("RUN_AT", org.jooq.impl.SQLDataType.LOCALTIME, this, "「runAt」- 定时任务中的JOB时间");
    /**
     * The column <code>DB_ETERNAL.I_JOB.DURATION</code>. 「duration」- JOB的间隔时间，（秒为单位）
     */
    public final TableField<IJobRecord, Long> DURATION = createField("DURATION", org.jooq.impl.SQLDataType.BIGINT, this, "「duration」- JOB的间隔时间，（秒为单位）");
    /**
     * The column <code>DB_ETERNAL.I_JOB.PROXY</code>. 「proxy」- 代理类，带有@On/@Off
     */
    public final TableField<IJobRecord, String> PROXY = createField("PROXY", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「proxy」- 代理类，带有@On/@Off");
    /**
     * The column <code>DB_ETERNAL.I_JOB.THRESHOLD</code>. 「threshold」- 默认值 300 s，（秒为单位）
     */
    public final TableField<IJobRecord, Integer> THRESHOLD = createField("THRESHOLD", org.jooq.impl.SQLDataType.INTEGER, this, "「threshold」- 默认值 300 s，（秒为单位）");
    /**
     * The column <code>DB_ETERNAL.I_JOB.INCOME_COMPONENT</code>. 「incomeComponent」对应income，必须是JobIncome，@On -&gt; income
     */
    public final TableField<IJobRecord, String> INCOME_COMPONENT = createField("INCOME_COMPONENT", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「incomeComponent」对应income，必须是JobIncome，@On -> income");
    /**
     * The column <code>DB_ETERNAL.I_JOB.INCOME_ADDRESS</code>. 「incomeAddress」对应incomeAddress，字符串，@On -&gt; address
     */
    public final TableField<IJobRecord, String> INCOME_ADDRESS = createField("INCOME_ADDRESS", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「incomeAddress」对应incomeAddress，字符串，@On -> address");
    /**
     * The column <code>DB_ETERNAL.I_JOB.OUTCOME_COMPONENT</code>. 「outcomeComponent」对应outcome，必须是JobOutcome，@Off -&gt; outcome
     */
    public final TableField<IJobRecord, String> OUTCOME_COMPONENT = createField("OUTCOME_COMPONENT", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「outcomeComponent」对应outcome，必须是JobOutcome，@Off -> outcome");
    /**
     * The column <code>DB_ETERNAL.I_JOB.OUTCOME_ADDRESS</code>. 「outcomeAddress」对应outcomeAddress，字符串，@Off -&gt; address
     */
    public final TableField<IJobRecord, String> OUTCOME_ADDRESS = createField("OUTCOME_ADDRESS", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「outcomeAddress」对应outcomeAddress，字符串，@Off -> address");
    /**
     * The column <code>DB_ETERNAL.I_JOB.SERVICE_ID</code>. 「serviceId」- 关联的服务ID
     */
    public final TableField<IJobRecord, String> SERVICE_ID = createField("SERVICE_ID", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「serviceId」- 关联的服务ID");
    /**
     * The column <code>DB_ETERNAL.I_JOB.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<IJobRecord, String> SIGMA = createField("SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.I_JOB.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<IJobRecord, String> LANGUAGE = createField("LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(10), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.I_JOB.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<IJobRecord, Boolean> ACTIVE = createField("ACTIVE", org.jooq.impl.SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.I_JOB.METADATA</code>. 「metadata」- 附加配置数据
     */
    public final TableField<IJobRecord, String> METADATA = createField("METADATA", org.jooq.impl.SQLDataType.CLOB, this, "「metadata」- 附加配置数据");
    /**
     * The column <code>DB_ETERNAL.I_JOB.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<IJobRecord, LocalDateTime> CREATED_AT = createField("CREATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.I_JOB.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<IJobRecord, String> CREATED_BY = createField("CREATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.I_JOB.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<IJobRecord, LocalDateTime> UPDATED_AT = createField("UPDATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.I_JOB.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<IJobRecord, String> UPDATED_BY = createField("UPDATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    /**
     * Create a <code>DB_ETERNAL.I_JOB</code> table reference
     */
    public IJob() {
        this(DSL.name("I_JOB"), null);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.I_JOB</code> table reference
     */
    public IJob(String alias) {
        this(DSL.name(alias), I_JOB);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.I_JOB</code> table reference
     */
    public IJob(Name alias) {
        this(alias, I_JOB);
    }

    private IJob(Name alias, Table<IJobRecord> aliased) {
        this(alias, aliased, null);
    }

    private IJob(Name alias, Table<IJobRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IJobRecord> getRecordType() {
        return IJobRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Db.DB_ETERNAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.I_JOB_NAMESPACE, Indexes.I_JOB_PRIMARY, Indexes.I_JOB_SIGMA, Indexes.I_JOB_SIGMA_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<IJobRecord> getPrimaryKey() {
        return Keys.KEY_I_JOB_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<IJobRecord>> getKeys() {
        return Arrays.<UniqueKey<IJobRecord>>asList(Keys.KEY_I_JOB_PRIMARY, Keys.KEY_I_JOB_NAMESPACE, Keys.KEY_I_JOB_SIGMA_2, Keys.KEY_I_JOB_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IJob as(String alias) {
        return new IJob(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IJob as(Name alias) {
        return new IJob(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IJob rename(String name) {
        return new IJob(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IJob rename(Name name) {
        return new IJob(name, null);
    }
}
