/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.jet.domain.tables.records;


import cn.vertxup.jet.domain.tables.IJob;
import cn.vertxup.jet.domain.tables.interfaces.IIJob;

import java.time.LocalDateTime;
import java.time.LocalTime;

import javax.annotation.Generated;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IJobRecord extends UpdatableRecordImpl<IJobRecord> implements IIJob {

    private static final long serialVersionUID = -1224048724;

    /**
     * Setter for <code>DB_ETERNAL.I_JOB.KEY</code>. 「key」- 任务ID
     */
    @Override
    public IJobRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_JOB.KEY</code>. 「key」- 任务ID
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_JOB.NAMESPACE</code>. 「namespace」- 任务所在名空间
     */
    @Override
    public IJobRecord setNamespace(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_JOB.NAMESPACE</code>. 「namespace」- 任务所在名空间
     */
    @Override
    public String getNamespace() {
        return (String) get(1);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_JOB.NAME</code>. 「name」- 任务名称
     */
    @Override
    public IJobRecord setName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_JOB.NAME</code>. 「name」- 任务名称
     */
    @Override
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_JOB.CODE</code>. 「comment」- 任务编码
     */
    @Override
    public IJobRecord setCode(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_JOB.CODE</code>. 「comment」- 任务编码
     */
    @Override
    public String getCode() {
        return (String) get(3);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_JOB.TYPE</code>. 「type」- 任务类型
     */
    @Override
    public IJobRecord setType(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_JOB.TYPE</code>. 「type」- 任务类型
     */
    @Override
    public String getType() {
        return (String) get(4);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_JOB.COMMENT</code>. 「comment」- 备注信息
     */
    @Override
    public IJobRecord setComment(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_JOB.COMMENT</code>. 「comment」- 备注信息
     */
    @Override
    public String getComment() {
        return (String) get(5);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_JOB.ADDITIONAL</code>. 「additional」- 额外配置信息
     */
    @Override
    public IJobRecord setAdditional(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_JOB.ADDITIONAL</code>. 「additional」- 额外配置信息
     */
    @Override
    public String getAdditional() {
        return (String) get(6);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_JOB.RUN_AT</code>. 「runAt」- 定时任务中的JOB时间
     */
    @Override
    public IJobRecord setRunAt(LocalTime value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_JOB.RUN_AT</code>. 「runAt」- 定时任务中的JOB时间
     */
    @Override
    public LocalTime getRunAt() {
        return (LocalTime) get(7);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_JOB.DURATION</code>. 「duration」- JOB的间隔时间，（秒为单位）
     */
    @Override
    public IJobRecord setDuration(Long value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_JOB.DURATION</code>. 「duration」- JOB的间隔时间，（秒为单位）
     */
    @Override
    public Long getDuration() {
        return (Long) get(8);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_JOB.PROXY</code>. 「proxy」- 代理类，带有@On/@Off
     */
    @Override
    public IJobRecord setProxy(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_JOB.PROXY</code>. 「proxy」- 代理类，带有@On/@Off
     */
    @Override
    public String getProxy() {
        return (String) get(9);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_JOB.THRESHOLD</code>. 「threshold」- 默认值 300 s，（秒为单位）
     */
    @Override
    public IJobRecord setThreshold(Integer value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_JOB.THRESHOLD</code>. 「threshold」- 默认值 300 s，（秒为单位）
     */
    @Override
    public Integer getThreshold() {
        return (Integer) get(10);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_JOB.INCOME_COMPONENT</code>. 「incomeComponent」对应income，必须是JobIncome，@On -&gt; income
     */
    @Override
    public IJobRecord setIncomeComponent(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_JOB.INCOME_COMPONENT</code>. 「incomeComponent」对应income，必须是JobIncome，@On -&gt; income
     */
    @Override
    public String getIncomeComponent() {
        return (String) get(11);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_JOB.INCOME_ADDRESS</code>. 「incomeAddress」对应incomeAddress，字符串，@On -&gt; address
     */
    @Override
    public IJobRecord setIncomeAddress(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_JOB.INCOME_ADDRESS</code>. 「incomeAddress」对应incomeAddress，字符串，@On -&gt; address
     */
    @Override
    public String getIncomeAddress() {
        return (String) get(12);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_JOB.OUTCOME_COMPONENT</code>. 「outcomeComponent」对应outcome，必须是JobOutcome，@Off -&gt; outcome
     */
    @Override
    public IJobRecord setOutcomeComponent(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_JOB.OUTCOME_COMPONENT</code>. 「outcomeComponent」对应outcome，必须是JobOutcome，@Off -&gt; outcome
     */
    @Override
    public String getOutcomeComponent() {
        return (String) get(13);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_JOB.OUTCOME_ADDRESS</code>. 「outcomeAddress」对应outcomeAddress，字符串，@Off -&gt; address
     */
    @Override
    public IJobRecord setOutcomeAddress(String value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_JOB.OUTCOME_ADDRESS</code>. 「outcomeAddress」对应outcomeAddress，字符串，@Off -&gt; address
     */
    @Override
    public String getOutcomeAddress() {
        return (String) get(14);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_JOB.SERVICE_ID</code>. 「serviceId」- 关联的服务ID
     */
    @Override
    public IJobRecord setServiceId(String value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_JOB.SERVICE_ID</code>. 「serviceId」- 关联的服务ID
     */
    @Override
    public String getServiceId() {
        return (String) get(15);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_JOB.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public IJobRecord setSigma(String value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_JOB.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(16);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_JOB.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public IJobRecord setLanguage(String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_JOB.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(17);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_JOB.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public IJobRecord setActive(Boolean value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_JOB.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(18);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_JOB.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public IJobRecord setMetadata(String value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_JOB.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public String getMetadata() {
        return (String) get(19);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_JOB.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public IJobRecord setCreatedAt(LocalDateTime value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_JOB.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(20);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_JOB.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public IJobRecord setCreatedBy(String value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_JOB.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(21);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_JOB.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public IJobRecord setUpdatedAt(LocalDateTime value) {
        set(22, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_JOB.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(22);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_JOB.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public IJobRecord setUpdatedBy(String value) {
        set(23, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_JOB.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(23);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(IIJob from) {
        setKey(from.getKey());
        setNamespace(from.getNamespace());
        setName(from.getName());
        setCode(from.getCode());
        setType(from.getType());
        setComment(from.getComment());
        setAdditional(from.getAdditional());
        setRunAt(from.getRunAt());
        setDuration(from.getDuration());
        setProxy(from.getProxy());
        setThreshold(from.getThreshold());
        setIncomeComponent(from.getIncomeComponent());
        setIncomeAddress(from.getIncomeAddress());
        setOutcomeComponent(from.getOutcomeComponent());
        setOutcomeAddress(from.getOutcomeAddress());
        setServiceId(from.getServiceId());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends IIJob> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached IJobRecord
     */
    public IJobRecord() {
        super(IJob.I_JOB);
    }

    /**
     * Create a detached, initialised IJobRecord
     */
    public IJobRecord(String key, String namespace, String name, String code, String type, String comment, String additional, LocalTime runAt, Long duration, String proxy, Integer threshold, String incomeComponent, String incomeAddress, String outcomeComponent, String outcomeAddress, String serviceId, String sigma, String language, Boolean active, String metadata, LocalDateTime createdAt, String createdBy, LocalDateTime updatedAt, String updatedBy) {
        super(IJob.I_JOB);

        set(0, key);
        set(1, namespace);
        set(2, name);
        set(3, code);
        set(4, type);
        set(5, comment);
        set(6, additional);
        set(7, runAt);
        set(8, duration);
        set(9, proxy);
        set(10, threshold);
        set(11, incomeComponent);
        set(12, incomeAddress);
        set(13, outcomeComponent);
        set(14, outcomeAddress);
        set(15, serviceId);
        set(16, sigma);
        set(17, language);
        set(18, active);
        set(19, metadata);
        set(20, createdAt);
        set(21, createdBy);
        set(22, updatedAt);
        set(23, updatedBy);
    }
}
