/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.erp.domain.tables.records;


import cn.vertxup.erp.domain.tables.RTeamEmployee;
import cn.vertxup.erp.domain.tables.interfaces.IRTeamEmployee;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RTeamEmployeeRecord extends UpdatableRecordImpl<RTeamEmployeeRecord> implements Record3<String, String, String>, IRTeamEmployee {

    private static final long serialVersionUID = -734050309;

    /**
     * Setter for <code>DB_ETERNAL.R_TEAM_EMPLOYEE.TEAM_ID</code>. 「teamId」- 组的ID
     */
    @Override
    public RTeamEmployeeRecord setTeamId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.R_TEAM_EMPLOYEE.TEAM_ID</code>. 「teamId」- 组的ID
     */
    @Override
    public String getTeamId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>DB_ETERNAL.R_TEAM_EMPLOYEE.EMPLOYEE_ID</code>. 「employeeId」- 员工ID
     */
    @Override
    public RTeamEmployeeRecord setEmployeeId(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.R_TEAM_EMPLOYEE.EMPLOYEE_ID</code>. 「employeeId」- 员工ID
     */
    @Override
    public String getEmployeeId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>DB_ETERNAL.R_TEAM_EMPLOYEE.COMMENT</code>. 「comment」- 关系备注
     */
    @Override
    public RTeamEmployeeRecord setComment(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.R_TEAM_EMPLOYEE.COMMENT</code>. 「comment」- 关系备注
     */
    @Override
    public String getComment() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<String, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return RTeamEmployee.R_TEAM_EMPLOYEE.TEAM_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return RTeamEmployee.R_TEAM_EMPLOYEE.EMPLOYEE_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return RTeamEmployee.R_TEAM_EMPLOYEE.COMMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getTeamId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getEmployeeId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getComment();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getTeamId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getEmployeeId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getComment();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RTeamEmployeeRecord value1(String value) {
        setTeamId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RTeamEmployeeRecord value2(String value) {
        setEmployeeId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RTeamEmployeeRecord value3(String value) {
        setComment(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RTeamEmployeeRecord values(String value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(IRTeamEmployee from) {
        setTeamId(from.getTeamId());
        setEmployeeId(from.getEmployeeId());
        setComment(from.getComment());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends IRTeamEmployee> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RTeamEmployeeRecord
     */
    public RTeamEmployeeRecord() {
        super(RTeamEmployee.R_TEAM_EMPLOYEE);
    }

    /**
     * Create a detached, initialised RTeamEmployeeRecord
     */
    public RTeamEmployeeRecord(String teamId, String employeeId, String comment) {
        super(RTeamEmployee.R_TEAM_EMPLOYEE);

        set(0, teamId);
        set(1, employeeId);
        set(2, comment);
    }
}
