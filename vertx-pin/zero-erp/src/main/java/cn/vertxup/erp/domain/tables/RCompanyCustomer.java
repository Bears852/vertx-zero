/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.erp.domain.tables;


import cn.vertxup.erp.domain.Db;
import cn.vertxup.erp.domain.Indexes;
import cn.vertxup.erp.domain.Keys;
import cn.vertxup.erp.domain.tables.records.RCompanyCustomerRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.10.8"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class RCompanyCustomer extends TableImpl<RCompanyCustomerRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.R_COMPANY_CUSTOMER</code>
     */
    public static final RCompanyCustomer R_COMPANY_CUSTOMER = new RCompanyCustomer();
    private static final long serialVersionUID = 1906778758;
    /**
     * The column <code>DB_ETERNAL.R_COMPANY_CUSTOMER.COMPANY_ID</code>. 「companyId」- 企业的ID
     */
    public final TableField<RCompanyCustomerRecord, String> COMPANY_ID = createField("COMPANY_ID", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "「companyId」- 企业的ID");
    /**
     * The column <code>DB_ETERNAL.R_COMPANY_CUSTOMER.CUSTOMER_ID</code>. 「customerId」- 客户信息的ID
     */
    public final TableField<RCompanyCustomerRecord, String> CUSTOMER_ID = createField("CUSTOMER_ID", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "「customerId」- 客户信息的ID");
    /**
     * The column <code>DB_ETERNAL.R_COMPANY_CUSTOMER.COMMENT</code>. 「comment」- 关系备注
     */
    public final TableField<RCompanyCustomerRecord, String> COMMENT = createField("COMMENT", org.jooq.impl.SQLDataType.CLOB, this, "「comment」- 关系备注");

    /**
     * Create a <code>DB_ETERNAL.R_COMPANY_CUSTOMER</code> table reference
     */
    public RCompanyCustomer() {
        this(DSL.name("R_COMPANY_CUSTOMER"), null);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.R_COMPANY_CUSTOMER</code> table reference
     */
    public RCompanyCustomer(String alias) {
        this(DSL.name(alias), R_COMPANY_CUSTOMER);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.R_COMPANY_CUSTOMER</code> table reference
     */
    public RCompanyCustomer(Name alias) {
        this(alias, R_COMPANY_CUSTOMER);
    }

    private RCompanyCustomer(Name alias, Table<RCompanyCustomerRecord> aliased) {
        this(alias, aliased, null);
    }

    private RCompanyCustomer(Name alias, Table<RCompanyCustomerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RCompanyCustomerRecord> getRecordType() {
        return RCompanyCustomerRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Db.DB_ETERNAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.R_COMPANY_CUSTOMER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RCompanyCustomerRecord> getPrimaryKey() {
        return Keys.KEY_R_COMPANY_CUSTOMER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RCompanyCustomerRecord>> getKeys() {
        return Arrays.<UniqueKey<RCompanyCustomerRecord>>asList(Keys.KEY_R_COMPANY_CUSTOMER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RCompanyCustomer as(String alias) {
        return new RCompanyCustomer(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RCompanyCustomer as(Name alias) {
        return new RCompanyCustomer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RCompanyCustomer rename(String name) {
        return new RCompanyCustomer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RCompanyCustomer rename(Name name) {
        return new RCompanyCustomer(name, null);
    }
}
