/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.ambient.domain.tables.records;


import cn.vertxup.ambient.domain.tables.XLog;
import cn.vertxup.ambient.domain.tables.interfaces.IXLog;

import java.time.LocalDateTime;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record18;
import org.jooq.Row18;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class XLogRecord extends UpdatableRecordImpl<XLogRecord> implements Record18<String, String, String, String, String, String, LocalDateTime, String, String, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String>, IXLog {

    private static final long serialVersionUID = 1970879573;

    /**
     * Setter for <code>DB_ETERNAL.X_LOG.KEY</code>. 「key」- 日志的主键
     */
    @Override
    public XLogRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_LOG.KEY</code>. 「key」- 日志的主键
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_LOG.TYPE</code>. 「type」- 日志的分类
     */
    @Override
    public XLogRecord setType(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_LOG.TYPE</code>. 「type」- 日志的分类
     */
    @Override
    public String getType() {
        return (String) get(1);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_LOG.LEVEL</code>. 「level」- 日志级别：ERROR / WARN / INFO
     */
    @Override
    public XLogRecord setLevel(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_LOG.LEVEL</code>. 「level」- 日志级别：ERROR / WARN / INFO
     */
    @Override
    public String getLevel() {
        return (String) get(2);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_LOG.INFO_STACK</code>. 「infoStack」- 堆栈信息
     */
    @Override
    public XLogRecord setInfoStack(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_LOG.INFO_STACK</code>. 「infoStack」- 堆栈信息
     */
    @Override
    public String getInfoStack() {
        return (String) get(3);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_LOG.INFO_SYSTEM</code>. 「infoSystem」- 日志内容
     */
    @Override
    public XLogRecord setInfoSystem(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_LOG.INFO_SYSTEM</code>. 「infoSystem」- 日志内容
     */
    @Override
    public String getInfoSystem() {
        return (String) get(4);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_LOG.INFO_READABLE</code>. 「infoReadable」- 日志的可读信息
     */
    @Override
    public XLogRecord setInfoReadable(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_LOG.INFO_READABLE</code>. 「infoReadable」- 日志的可读信息
     */
    @Override
    public String getInfoReadable() {
        return (String) get(5);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_LOG.INFO_AT</code>. 「infoAt」- 日志记录时间
     */
    @Override
    public XLogRecord setInfoAt(LocalDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_LOG.INFO_AT</code>. 「infoAt」- 日志记录时间
     */
    @Override
    public LocalDateTime getInfoAt() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_LOG.LOG_AGENT</code>. 「logAgent」- 记录日志的 agent 信息
     */
    @Override
    public XLogRecord setLogAgent(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_LOG.LOG_AGENT</code>. 「logAgent」- 记录日志的 agent 信息
     */
    @Override
    public String getLogAgent() {
        return (String) get(7);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_LOG.LOG_IP</code>. 「logIp」- 日志扩展组件
     */
    @Override
    public XLogRecord setLogIp(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_LOG.LOG_IP</code>. 「logIp」- 日志扩展组件
     */
    @Override
    public String getLogIp() {
        return (String) get(8);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_LOG.LOG_USER</code>. 「logUser」- 日志记录人
     */
    @Override
    public XLogRecord setLogUser(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_LOG.LOG_USER</code>. 「logUser」- 日志记录人
     */
    @Override
    public String getLogUser() {
        return (String) get(9);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_LOG.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public XLogRecord setActive(Boolean value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_LOG.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(10);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_LOG.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public XLogRecord setSigma(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_LOG.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(11);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_LOG.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public XLogRecord setMetadata(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_LOG.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public String getMetadata() {
        return (String) get(12);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_LOG.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public XLogRecord setLanguage(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_LOG.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(13);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_LOG.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public XLogRecord setCreatedAt(LocalDateTime value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_LOG.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(14);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_LOG.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public XLogRecord setCreatedBy(String value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_LOG.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(15);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_LOG.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public XLogRecord setUpdatedAt(LocalDateTime value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_LOG.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(16);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_LOG.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public XLogRecord setUpdatedBy(String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_LOG.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(17);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record18 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row18<String, String, String, String, String, String, LocalDateTime, String, String, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row18) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row18<String, String, String, String, String, String, LocalDateTime, String, String, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String> valuesRow() {
        return (Row18) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return XLog.X_LOG.KEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return XLog.X_LOG.TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return XLog.X_LOG.LEVEL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return XLog.X_LOG.INFO_STACK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return XLog.X_LOG.INFO_SYSTEM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field6() {
        return XLog.X_LOG.INFO_READABLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field7() {
        return XLog.X_LOG.INFO_AT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field8() {
        return XLog.X_LOG.LOG_AGENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field9() {
        return XLog.X_LOG.LOG_IP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field10() {
        return XLog.X_LOG.LOG_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field11() {
        return XLog.X_LOG.ACTIVE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field12() {
        return XLog.X_LOG.SIGMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field13() {
        return XLog.X_LOG.METADATA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field14() {
        return XLog.X_LOG.LANGUAGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field15() {
        return XLog.X_LOG.CREATED_AT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field16() {
        return XLog.X_LOG.CREATED_BY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field17() {
        return XLog.X_LOG.UPDATED_AT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field18() {
        return XLog.X_LOG.UPDATED_BY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getKey();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getLevel();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getInfoStack();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component5() {
        return getInfoSystem();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component6() {
        return getInfoReadable();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime component7() {
        return getInfoAt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component8() {
        return getLogAgent();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component9() {
        return getLogIp();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component10() {
        return getLogUser();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean component11() {
        return getActive();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component12() {
        return getSigma();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component13() {
        return getMetadata();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component14() {
        return getLanguage();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime component15() {
        return getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component16() {
        return getCreatedBy();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime component17() {
        return getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component18() {
        return getUpdatedBy();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getKey();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getLevel();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getInfoStack();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getInfoSystem();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value6() {
        return getInfoReadable();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value7() {
        return getInfoAt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value8() {
        return getLogAgent();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value9() {
        return getLogIp();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value10() {
        return getLogUser();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value11() {
        return getActive();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value12() {
        return getSigma();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value13() {
        return getMetadata();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value14() {
        return getLanguage();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value15() {
        return getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value16() {
        return getCreatedBy();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value17() {
        return getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value18() {
        return getUpdatedBy();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XLogRecord value1(String value) {
        setKey(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XLogRecord value2(String value) {
        setType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XLogRecord value3(String value) {
        setLevel(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XLogRecord value4(String value) {
        setInfoStack(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XLogRecord value5(String value) {
        setInfoSystem(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XLogRecord value6(String value) {
        setInfoReadable(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XLogRecord value7(LocalDateTime value) {
        setInfoAt(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XLogRecord value8(String value) {
        setLogAgent(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XLogRecord value9(String value) {
        setLogIp(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XLogRecord value10(String value) {
        setLogUser(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XLogRecord value11(Boolean value) {
        setActive(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XLogRecord value12(String value) {
        setSigma(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XLogRecord value13(String value) {
        setMetadata(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XLogRecord value14(String value) {
        setLanguage(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XLogRecord value15(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XLogRecord value16(String value) {
        setCreatedBy(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XLogRecord value17(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XLogRecord value18(String value) {
        setUpdatedBy(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XLogRecord values(String value1, String value2, String value3, String value4, String value5, String value6, LocalDateTime value7, String value8, String value9, String value10, Boolean value11, String value12, String value13, String value14, LocalDateTime value15, String value16, LocalDateTime value17, String value18) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(IXLog from) {
        setKey(from.getKey());
        setType(from.getType());
        setLevel(from.getLevel());
        setInfoStack(from.getInfoStack());
        setInfoSystem(from.getInfoSystem());
        setInfoReadable(from.getInfoReadable());
        setInfoAt(from.getInfoAt());
        setLogAgent(from.getLogAgent());
        setLogIp(from.getLogIp());
        setLogUser(from.getLogUser());
        setActive(from.getActive());
        setSigma(from.getSigma());
        setMetadata(from.getMetadata());
        setLanguage(from.getLanguage());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends IXLog> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached XLogRecord
     */
    public XLogRecord() {
        super(XLog.X_LOG);
    }

    /**
     * Create a detached, initialised XLogRecord
     */
    public XLogRecord(String key, String type, String level, String infoStack, String infoSystem, String infoReadable, LocalDateTime infoAt, String logAgent, String logIp, String logUser, Boolean active, String sigma, String metadata, String language, LocalDateTime createdAt, String createdBy, LocalDateTime updatedAt, String updatedBy) {
        super(XLog.X_LOG);

        set(0, key);
        set(1, type);
        set(2, level);
        set(3, infoStack);
        set(4, infoSystem);
        set(5, infoReadable);
        set(6, infoAt);
        set(7, logAgent);
        set(8, logIp);
        set(9, logUser);
        set(10, active);
        set(11, sigma);
        set(12, metadata);
        set(13, language);
        set(14, createdAt);
        set(15, createdBy);
        set(16, updatedAt);
        set(17, updatedBy);
    }
}
