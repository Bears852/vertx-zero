/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ambient.domain.tables;


import cn.vertxup.ambient.domain.Db;
import cn.vertxup.ambient.domain.Indexes;
import cn.vertxup.ambient.domain.Keys;
import cn.vertxup.ambient.domain.tables.records.XLogRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.10.8"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class XLog extends TableImpl<XLogRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.X_LOG</code>
     */
    public static final XLog X_LOG = new XLog();
    private static final long serialVersionUID = 1908612171;
    /**
     * The column <code>DB_ETERNAL.X_LOG.KEY</code>. 「key」- 日志的主键
     */
    public final TableField<XLogRecord, String> KEY = createField("KEY", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 日志的主键");
    /**
     * The column <code>DB_ETERNAL.X_LOG.TYPE</code>. 「type」- 日志的分类
     */
    public final TableField<XLogRecord, String> TYPE = createField("TYPE", org.jooq.impl.SQLDataType.VARCHAR(64), this, "「type」- 日志的分类");
    /**
     * The column <code>DB_ETERNAL.X_LOG.LEVEL</code>. 「level」- 日志级别：ERROR / WARN / INFO
     */
    public final TableField<XLogRecord, String> LEVEL = createField("LEVEL", org.jooq.impl.SQLDataType.VARCHAR(10), this, "「level」- 日志级别：ERROR / WARN / INFO");
    /**
     * The column <code>DB_ETERNAL.X_LOG.INFO_STACK</code>. 「infoStack」- 堆栈信息
     */
    public final TableField<XLogRecord, String> INFO_STACK = createField("INFO_STACK", org.jooq.impl.SQLDataType.CLOB, this, "「infoStack」- 堆栈信息");
    /**
     * The column <code>DB_ETERNAL.X_LOG.INFO_SYSTEM</code>. 「infoSystem」- 日志内容
     */
    public final TableField<XLogRecord, String> INFO_SYSTEM = createField("INFO_SYSTEM", org.jooq.impl.SQLDataType.CLOB, this, "「infoSystem」- 日志内容");
    /**
     * The column <code>DB_ETERNAL.X_LOG.INFO_READABLE</code>. 「infoReadable」- 日志的可读信息
     */
    public final TableField<XLogRecord, String> INFO_READABLE = createField("INFO_READABLE", org.jooq.impl.SQLDataType.CLOB, this, "「infoReadable」- 日志的可读信息");
    /**
     * The column <code>DB_ETERNAL.X_LOG.INFO_AT</code>. 「infoAt」- 日志记录时间
     */
    public final TableField<XLogRecord, LocalDateTime> INFO_AT = createField("INFO_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「infoAt」- 日志记录时间");
    /**
     * The column <code>DB_ETERNAL.X_LOG.LOG_AGENT</code>. 「logAgent」- 记录日志的 agent 信息
     */
    public final TableField<XLogRecord, String> LOG_AGENT = createField("LOG_AGENT", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「logAgent」- 记录日志的 agent 信息");
    /**
     * The column <code>DB_ETERNAL.X_LOG.LOG_IP</code>. 「logIp」- 日志扩展组件
     */
    public final TableField<XLogRecord, String> LOG_IP = createField("LOG_IP", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「logIp」- 日志扩展组件");
    /**
     * The column <code>DB_ETERNAL.X_LOG.LOG_USER</code>. 「logUser」- 日志记录人
     */
    public final TableField<XLogRecord, String> LOG_USER = createField("LOG_USER", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「logUser」- 日志记录人");
    /**
     * The column <code>DB_ETERNAL.X_LOG.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<XLogRecord, Boolean> ACTIVE = createField("ACTIVE", org.jooq.impl.SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.X_LOG.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<XLogRecord, String> SIGMA = createField("SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.X_LOG.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<XLogRecord, String> METADATA = createField("METADATA", org.jooq.impl.SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.X_LOG.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<XLogRecord, String> LANGUAGE = createField("LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.X_LOG.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<XLogRecord, LocalDateTime> CREATED_AT = createField("CREATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.X_LOG.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<XLogRecord, String> CREATED_BY = createField("CREATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.X_LOG.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<XLogRecord, LocalDateTime> UPDATED_AT = createField("UPDATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.X_LOG.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<XLogRecord, String> UPDATED_BY = createField("UPDATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    /**
     * Create a <code>DB_ETERNAL.X_LOG</code> table reference
     */
    public XLog() {
        this(DSL.name("X_LOG"), null);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.X_LOG</code> table reference
     */
    public XLog(String alias) {
        this(DSL.name(alias), X_LOG);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.X_LOG</code> table reference
     */
    public XLog(Name alias) {
        this(alias, X_LOG);
    }

    private XLog(Name alias, Table<XLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private XLog(Name alias, Table<XLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<XLogRecord> getRecordType() {
        return XLogRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Db.DB_ETERNAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.X_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<XLogRecord> getPrimaryKey() {
        return Keys.KEY_X_LOG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<XLogRecord>> getKeys() {
        return Arrays.<UniqueKey<XLogRecord>>asList(Keys.KEY_X_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XLog as(String alias) {
        return new XLog(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XLog as(Name alias) {
        return new XLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public XLog rename(String name) {
        return new XLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public XLog rename(Name name) {
        return new XLog(name, null);
    }
}
