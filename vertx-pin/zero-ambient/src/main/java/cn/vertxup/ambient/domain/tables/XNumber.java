/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ambient.domain.tables;


import cn.vertxup.ambient.domain.Db;
import cn.vertxup.ambient.domain.Indexes;
import cn.vertxup.ambient.domain.Keys;
import cn.vertxup.ambient.domain.tables.records.XNumberRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.10.8"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class XNumber extends TableImpl<XNumberRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.X_NUMBER</code>
     */
    public static final XNumber X_NUMBER = new XNumber();
    private static final long serialVersionUID = 97878651;
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.KEY</code>. 「key」- 主键
     */
    public final TableField<XNumberRecord, String> KEY = createField("KEY", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 主键");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.CODE</code>. 「code」- 编码
     */
    public final TableField<XNumberRecord, String> CODE = createField("CODE", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「code」- 编码");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.COMMENT</code>. 「comment」- 编号备注信息，用于描述编号数据,comment,S_COMMENT
     */
    public final TableField<XNumberRecord, String> COMMENT = createField("COMMENT", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「comment」- 编号备注信息，用于描述编号数据,comment,S_COMMENT");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.CURRENT</code>. 「current」编号当前值，对应${seed}，每次变化时current提取后更新为：current + step或current - step,current,L_CURRENT
     */
    public final TableField<XNumberRecord, Long> CURRENT = createField("CURRENT", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "「current」编号当前值，对应${seed}，每次变化时current提取后更新为：current + step或current - step,current,L_CURRENT");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.FORMAT</code>. 「format」格式信息，用于处理最终格式：,format,S_FORMAT
     */
    public final TableField<XNumberRecord, String> FORMAT = createField("FORMAT", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「format」格式信息，用于处理最终格式：,format,S_FORMAT");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.IDENTIFIER</code>. 「identifier」编号对应的identifier，用于查询当前identifier使用的序号信息,identifier,S_IDENTIFIER
     */
    public final TableField<XNumberRecord, String> IDENTIFIER = createField("IDENTIFIER", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "「identifier」编号对应的identifier，用于查询当前identifier使用的序号信息,identifier,S_IDENTIFIER");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.PREFIX</code>. 「prefix」编号前缀,prefix,S_PREFIX
     */
    public final TableField<XNumberRecord, String> PREFIX = createField("PREFIX", org.jooq.impl.SQLDataType.VARCHAR(64), this, "「prefix」编号前缀,prefix,S_PREFIX");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.SUFFIX</code>. 「suffix」编号后缀,suffix,S_SUFFIX
     */
    public final TableField<XNumberRecord, String> SUFFIX = createField("SUFFIX", org.jooq.impl.SQLDataType.VARCHAR(64), this, "「suffix」编号后缀,suffix,S_SUFFIX");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.TIME</code>. 「time」时间对应Pattern，对应${time}：YYYY-MM-DD HH:mm:ss用于描述时间格式生成序号时间部分,time,S_TIME
     */
    public final TableField<XNumberRecord, String> TIME = createField("TIME", org.jooq.impl.SQLDataType.VARCHAR(20), this, "「time」时间对应Pattern，对应${time}：YYYY-MM-DD HH:mm:ss用于描述时间格式生成序号时间部分,time,S_TIME");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.LENGTH</code>. 「length」编号长度，编号长度不包含prefix和suffix部分,length,I_LENGTH
     */
    public final TableField<XNumberRecord, Integer> LENGTH = createField("LENGTH", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "「length」编号长度，编号长度不包含prefix和suffix部分,length,I_LENGTH");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.STEP</code>. 「step」编号的步进系数，每次按照step进行变化,step,I_STEP
     */
    public final TableField<XNumberRecord, Integer> STEP = createField("STEP", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "「step」编号的步进系数，每次按照step进行变化,step,I_STEP");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.DECREMENT</code>. 「decrement」递增/递减？如果为true则递减，为false则是递增,decrement,IS_DECREMENT
     */
    public final TableField<XNumberRecord, Boolean> DECREMENT = createField("DECREMENT", org.jooq.impl.SQLDataType.BIT.nullable(false), this, "「decrement」递增/递减？如果为true则递减，为false则是递增,decrement,IS_DECREMENT");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.APP_ID</code>. 「appId」- 关联的应用程序ID
     */
    public final TableField<XNumberRecord, String> APP_ID = createField("APP_ID", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「appId」- 关联的应用程序ID");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<XNumberRecord, Boolean> ACTIVE = createField("ACTIVE", org.jooq.impl.SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<XNumberRecord, String> SIGMA = createField("SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<XNumberRecord, String> METADATA = createField("METADATA", org.jooq.impl.SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<XNumberRecord, String> LANGUAGE = createField("LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<XNumberRecord, LocalDateTime> CREATED_AT = createField("CREATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<XNumberRecord, String> CREATED_BY = createField("CREATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<XNumberRecord, LocalDateTime> UPDATED_AT = createField("UPDATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<XNumberRecord, String> UPDATED_BY = createField("UPDATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    /**
     * Create a <code>DB_ETERNAL.X_NUMBER</code> table reference
     */
    public XNumber() {
        this(DSL.name("X_NUMBER"), null);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.X_NUMBER</code> table reference
     */
    public XNumber(String alias) {
        this(DSL.name(alias), X_NUMBER);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.X_NUMBER</code> table reference
     */
    public XNumber(Name alias) {
        this(alias, X_NUMBER);
    }

    private XNumber(Name alias, Table<XNumberRecord> aliased) {
        this(alias, aliased, null);
    }

    private XNumber(Name alias, Table<XNumberRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<XNumberRecord> getRecordType() {
        return XNumberRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Db.DB_ETERNAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.X_NUMBER_APP_ID, Indexes.X_NUMBER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<XNumberRecord> getPrimaryKey() {
        return Keys.KEY_X_NUMBER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<XNumberRecord>> getKeys() {
        return Arrays.<UniqueKey<XNumberRecord>>asList(Keys.KEY_X_NUMBER_PRIMARY, Keys.KEY_X_NUMBER_APP_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XNumber as(String alias) {
        return new XNumber(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XNumber as(Name alias) {
        return new XNumber(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public XNumber rename(String name) {
        return new XNumber(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public XNumber rename(Name name) {
        return new XNumber(name, null);
    }
}
