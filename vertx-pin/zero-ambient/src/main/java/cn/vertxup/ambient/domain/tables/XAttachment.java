/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ambient.domain.tables;


import cn.vertxup.ambient.domain.Db;
import cn.vertxup.ambient.domain.Indexes;
import cn.vertxup.ambient.domain.Keys;
import cn.vertxup.ambient.domain.tables.records.XAttachmentRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.10.8"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class XAttachment extends TableImpl<XAttachmentRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.X_ATTACHMENT</code>
     */
    public static final XAttachment X_ATTACHMENT = new XAttachment();
    private static final long serialVersionUID = 1975425762;
    /**
     * The column <code>DB_ETERNAL.X_ATTACHMENT.KEY</code>. 「key」- 附件的ID值
     */
    public final TableField<XAttachmentRecord, String> KEY = createField("KEY", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 附件的ID值");
    /**
     * The column <code>DB_ETERNAL.X_ATTACHMENT.STORE_WAY</code>. 「storeWay」- 存储方式，BLOB / FILE / TPL / REMOTE
     */
    public final TableField<XAttachmentRecord, String> STORE_WAY = createField("STORE_WAY", org.jooq.impl.SQLDataType.VARCHAR(12), this, "「storeWay」- 存储方式，BLOB / FILE / TPL / REMOTE");
    /**
     * The column <code>DB_ETERNAL.X_ATTACHMENT.STATUS</code>. 「status」- 状态，PROGRESS / SUCCESS
     */
    public final TableField<XAttachmentRecord, String> STATUS = createField("STATUS", org.jooq.impl.SQLDataType.VARCHAR(12), this, "「status」- 状态，PROGRESS / SUCCESS");
    /**
     * The column <code>DB_ETERNAL.X_ATTACHMENT.NAME</code>. 「name」- 文件名（带扩展名）
     */
    public final TableField<XAttachmentRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「name」- 文件名（带扩展名）");
    /**
     * The column <code>DB_ETERNAL.X_ATTACHMENT.FILE_NAME</code>. 「fileName」- 原始文件名（不带扩展名）
     */
    public final TableField<XAttachmentRecord, String> FILE_NAME = createField("FILE_NAME", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「fileName」- 原始文件名（不带扩展名）");
    /**
     * The column <code>DB_ETERNAL.X_ATTACHMENT.FILE_KEY</code>. 「fileKey」- TPL模式中的文件唯一的key（全局唯一）
     */
    public final TableField<XAttachmentRecord, String> FILE_KEY = createField("FILE_KEY", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「fileKey」- TPL模式中的文件唯一的key（全局唯一）");
    /**
     * The column <code>DB_ETERNAL.X_ATTACHMENT.FILE_URL</code>. 「fileUrl」- 该文件的下载链接（全局唯一）
     */
    public final TableField<XAttachmentRecord, String> FILE_URL = createField("FILE_URL", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「fileUrl」- 该文件的下载链接（全局唯一）");
    /**
     * The column <code>DB_ETERNAL.X_ATTACHMENT.FILE_PATH</code>. 「filePath」- 该文件的存储地址，FILE时使用
     */
    public final TableField<XAttachmentRecord, String> FILE_PATH = createField("FILE_PATH", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「filePath」- 该文件的存储地址，FILE时使用");
    /**
     * The column <code>DB_ETERNAL.X_ATTACHMENT.EXTENSION</code>. 「extension」- 文件扩展名
     */
    public final TableField<XAttachmentRecord, String> EXTENSION = createField("EXTENSION", org.jooq.impl.SQLDataType.VARCHAR(10), this, "「extension」- 文件扩展名");
    /**
     * The column <code>DB_ETERNAL.X_ATTACHMENT.MODULE</code>. 「module」- 业务标识
     */
    public final TableField<XAttachmentRecord, String> MODULE = createField("MODULE", org.jooq.impl.SQLDataType.VARCHAR(64), this, "「module」- 业务标识");
    /**
     * The column <code>DB_ETERNAL.X_ATTACHMENT.MIME</code>. 「mime」- 该文件的MIME类型
     */
    public final TableField<XAttachmentRecord, String> MIME = createField("MIME", org.jooq.impl.SQLDataType.VARCHAR(64), this, "「mime」- 该文件的MIME类型");
    /**
     * The column <code>DB_ETERNAL.X_ATTACHMENT.SIZE</code>. 「size」- 该文件的尺寸
     */
    public final TableField<XAttachmentRecord, Integer> SIZE = createField("SIZE", org.jooq.impl.SQLDataType.INTEGER, this, "「size」- 该文件的尺寸");
    /**
     * The column <code>DB_ETERNAL.X_ATTACHMENT.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<XAttachmentRecord, Boolean> ACTIVE = createField("ACTIVE", org.jooq.impl.SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.X_ATTACHMENT.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<XAttachmentRecord, String> SIGMA = createField("SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.X_ATTACHMENT.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<XAttachmentRecord, String> METADATA = createField("METADATA", org.jooq.impl.SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.X_ATTACHMENT.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<XAttachmentRecord, String> LANGUAGE = createField("LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.X_ATTACHMENT.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<XAttachmentRecord, LocalDateTime> CREATED_AT = createField("CREATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.X_ATTACHMENT.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<XAttachmentRecord, String> CREATED_BY = createField("CREATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.X_ATTACHMENT.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<XAttachmentRecord, LocalDateTime> UPDATED_AT = createField("UPDATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.X_ATTACHMENT.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<XAttachmentRecord, String> UPDATED_BY = createField("UPDATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    /**
     * Create a <code>DB_ETERNAL.X_ATTACHMENT</code> table reference
     */
    public XAttachment() {
        this(DSL.name("X_ATTACHMENT"), null);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.X_ATTACHMENT</code> table reference
     */
    public XAttachment(String alias) {
        this(DSL.name(alias), X_ATTACHMENT);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.X_ATTACHMENT</code> table reference
     */
    public XAttachment(Name alias) {
        this(alias, X_ATTACHMENT);
    }

    private XAttachment(Name alias, Table<XAttachmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private XAttachment(Name alias, Table<XAttachmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<XAttachmentRecord> getRecordType() {
        return XAttachmentRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Db.DB_ETERNAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.X_ATTACHMENT_FILE_KEY, Indexes.X_ATTACHMENT_FILE_PATH, Indexes.X_ATTACHMENT_FILE_URL, Indexes.X_ATTACHMENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<XAttachmentRecord> getPrimaryKey() {
        return Keys.KEY_X_ATTACHMENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<XAttachmentRecord>> getKeys() {
        return Arrays.<UniqueKey<XAttachmentRecord>>asList(Keys.KEY_X_ATTACHMENT_PRIMARY, Keys.KEY_X_ATTACHMENT_FILE_KEY, Keys.KEY_X_ATTACHMENT_FILE_URL, Keys.KEY_X_ATTACHMENT_FILE_PATH);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XAttachment as(String alias) {
        return new XAttachment(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XAttachment as(Name alias) {
        return new XAttachment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public XAttachment rename(String name) {
        return new XAttachment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public XAttachment rename(Name name) {
        return new XAttachment(name, null);
    }
}
